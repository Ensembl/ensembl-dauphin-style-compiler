module "peregrine";

/* sticks etc */

struct allot {
    name: string,
    priority: number
};

expr make_allotment(name_val,priority_val) allot { name: name_val, priority: priority_val };

/* */

struct laneid { value: number };
struct directcolour { value: number };
struct colour { value: number };
struct patina { value: number };
struct zmenutmpl { value: number };
struct penspec { value: number };
struct plotterspec { value: number };
struct allotment { value: number };
struct spacebaseid { value: number };
struct request { value: number };
struct backgroundid { value: number };

struct region {
    stick: string,
    index: number,
    scale: number
};

func make_region(string,number,number) becomes region;

struct datasource { value: number };

func bp_range() becomes number;
func px_per_carriage() becomes number;

func track_new(string,string,number,number,number) becomes laneid;
proc track_add_tag(laneid,string);
proc track_add_trigger(laneid,vec(string));
proc track_add_allotment(laneid,string,number,string,vec(string));
proc track_add_switch(laneid,vec(string));
proc track_set_switch(laneid,vec(string));
proc track_clear_switch(laneid,vec(string));
proc track_set_scale(laneid,number,number);
proc track_set_max_scale_jump(laneid,number);
proc track_apply(laneid);

func spacebase(number,number,number) becomes spacebaseid;
func background(directcolour,boolean) becomes backgroundid;
func use_allotment(string) becomes allotment;
func direct_colour(number,number,number,number) becomes directcolour;
func simple_colour(directcolour) becomes colour;
func spot_colour(directcolour) becomes colour;
func striped(directcolour,directcolour,number,number,number) becomes colour;
func barred(directcolour,directcolour,number,number,number) becomes colour;
func zmenu(string) becomes zmenutmpl;
func patina_filled(colour) becomes patina;
func patina_hollow(colour,number) becomes patina;
func patina_zmenu(zmenutmpl, vec(string), vec(string)) becomes patina;
func patina_switch(string,boolean) becomes patina;
func pen(string,number,directcolour,backgroundid) becomes penspec;
func plotter(number,directcolour) becomes plotterspec;
func make_request(string,string,region) becomes request;
func request_scope(request,string,string) becomes request;

func list_switch(vec(string)) becomes string;

func switch_string(string,string) becomes string;
func switch_number(string,string) becomes number;
func switch_boolean(string,string) becomes boolean;
func switch_null(string,string) becomes boolean;

func setting_string(string,string) becomes string;
func setting_number(string,string) becomes number;
func setting_boolean(string,string) becomes boolean;
func setting_null(string,string) becomes boolean;

func only_warm() becomes boolean;

proc empty(spacebaseid,spacebaseid,allotment);
proc rectangle(spacebaseid,spacebaseid,patina,allotment);
proc text2(spacebaseid,penspec,string,allotment);
proc running_text(spacebaseid,spacebaseid,penspec,string,allotment);
proc wiggle(number,number,plotterspec,number,boolean,allotment);
proc draw_image(spacebaseid,string,allotment);

struct eoesgroupid { value: number };
struct eoesvarid { value: number };
struct eoestmplid { value: number };
struct eoespairid { value: number };

func eoes_var_number(eoesgroupid,number) becomes eoesvarid;
func eoes_var_string(eoesgroupid,string) becomes eoesvarid;
func eoes_var_boolean(eoesgroupid,boolean) becomes eoesvarid;
func eoes_null() becomes eoestmplid;
func eoes_array(eoestmplid) becomes eoestmplid;
func eoes_pair(string,eoestmplid) becomes eoespairid;
func eoes_object(eoespairid) becomes eoestmplid;
func eoes_condition(eoesvarid,eoestmplid) becomes eoestmplid;
func eoes_group() becomes eoesgroupid;
func eoes_all(eoesgroupid,eoestmplid) becomes eoestmplid;
func eoes_var(eoesvarid) becomes eoestmplid;
func eoes_number(number) becomes eoestmplid;
func eoes_string(string) becomes eoestmplid;
func eoes_boolean(boolean) becomes eoestmplid;
func eoes_late() becomes eoestmplid;

stmt text_underneath(x,y,penspec,writing,allt) {
    text2(spacebase(x,y,0),penspec,writing,allt);
}

stmt image_underneath(x,y,name,allt) {
    sb := spacebase(x,y,0);
    draw_image(sb,name,allt);
}

stmt rectangle_on_genome(dstart,dend,height,patina,allt) {
    top_left := spacebase(dstart,0,0);
    bottom_right := spacebase(dend,height,0);
    rectangle(top_left,bottom_right,patina,allt);
}

stmt rectangle_on_genome_offset(dstart,dend,height,patina,allt,offset) {
    top_left := spacebase(dstart,offset,0);
    bottom_right := spacebase(dend,height+offset,0);
    rectangle(top_left,bottom_right,patina,allt);
}

stmt indented_rectangle_on_genome(dstart,dend,height,patina,allt) {
    top_left := spacebase(dstart,0,1);
    bottom_right := spacebase(dend,height,-1);
    rectangle(top_left,bottom_right,patina,allt);
}

func get_region() becomes region;
func get_data(request) becomes datasource;

func data_stream(datasource,string) becomes bytes;
func lesqlite2(bytes) becomes number;
func zigzag(number) becomes number;
func delta(number) becomes number;
func alternate(number) becomes number;
func classify(string,number) becomes string;
func split_string(bytes) becomes vec(string);
func base_flip(string) becomes string;
func append_group(string,string) becomes string;
func append_depth(string,number) becomes string;

proc style(string,string,string);

expr delta_seq(stream,name) delta(zigzag(lesqlite2(data_stream(stream,name))));
expr string_seq(stream,name) split_string(data_stream(stream,name))[];
expr letter_string(stream,name) std::split_characters(data_stream(stream,name))[];
expr positive_seq(stream,name) lesqlite2(data_stream(stream,name));
expr classified_seq(stream,keys,values) classify(string_seq(stream,keys),positive_seq(stream,values));
expr bool_seq(stream,name) std::bytes_to_bool(data_stream(stream,name));

func patina_metadata(string,string,eoestmplid) becomes patina;
