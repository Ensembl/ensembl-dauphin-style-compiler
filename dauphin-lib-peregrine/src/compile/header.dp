module "peregrine";

struct stick {
    id: string,
    size: number,
    topology: number,
    tags: vec(string)
};

struct seaendpair { value: number };
struct seaend { value: number };
struct shipend { value: number };
struct directcolour { value: number };
struct patina { value: number };
struct zmenutmpl { value: number };
struct penspec { value: number };

struct panel {
    stick: string,
    index: number,
    scale: number,
    track: string,
    focus: string
};

struct datasource { value: number };

proc add_stick_authority(string);
func get_stick_id() becomes string;
func get_stick_data(string,string) becomes stick;
proc add_stick(stick);

func panel_new() becomes number;
proc panel_add_tag(number,string);
proc panel_add_track(number,string);
proc panel_set_scale(number,number,number);
proc panel_apply(number,string,string);

func interval(number,number) becomes seaendpair;
func screen_start_pair(number,number) becomes seaendpair;
func screen_end_pair(number,number) becomes seaendpair;
func screen_span_pair(number,number) becomes seaendpair;
func position(number) becomes seaend;
func screen_start(number) becomes seaend;
func screen_end(number) becomes seaend;
func pin_start(number) becomes shipend;
func pin_centre(number) becomes shipend;
func pin_end(number) becomes shipend;

func colour(number,number,number) becomes directcolour;
func zmenu(string) becomes zmenutmpl;
func patina_filled(directcolour) becomes patina;
func patina_hollow(directcolour) becomes patina;
func patina_zmenu(zmenutmpl, vec(string), vec(string)) becomes patina;
func pen(string,number,directcolour) becomes penspec;

proc rectangle2(seaendpair,shipend,shipend,seaendpair,shipend,shipend,patina,string,string);
proc rectangle1(seaend,shipend,number,seaend,shipend,number,patina,string,string);
proc text(seaend,shipend,seaend,shipend,penspec,string,string,string);

stmt rectangle_on_genome(start,end,half_height,patina,allotment,track) {
    rectangle2(interval(start,end),pin_start(0),pin_end(0),
               interval(-half_height,half_height),pin_start(0),pin_end(0),
               patina,allotment,track);
}

stmt text_underneath(x,y,pen_spec,the_text,allotment,track) {
    text(position(x),pin_start(0),position(y),pin_start(0),pen_spec,the_text,allotment,track);
}

func get_panel() becomes panel;
func get_data(string,string,panel) becomes datasource;

func data_stream(datasource,string) becomes bytes;
func inflate_bytes(bytes) becomes bytes;
func inflate_string(bytes) becomes string;
func lesqlite2(bytes) becomes number;
func zigzag(number) becomes number;
func delta(number) becomes number;
func alternate(number) becomes number;
func classify(string,number) becomes string;
func split_string(string) becomes vec(string);

expr delta_seq(stream,name) delta(zigzag(lesqlite2(inflate_bytes(data_stream(stream,name)))));
expr string_seq(stream,name) split_string(inflate_string(data_stream(stream,name)))[];
expr positive_seq(stream,name) lesqlite2(inflate_bytes(data_stream(data,name)));
expr classified_seq(stream,keys,values) classify(string_seq(stream,keys),positive_seq(stream,values));