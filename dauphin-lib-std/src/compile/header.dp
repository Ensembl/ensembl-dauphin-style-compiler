module "std";

proc assign(stomp mask _A, _A);
inline ":=" assign left 14;

func eq(_A,_A) becomes boolean;
inline "==" eq left 5;

func gt(number,number) becomes boolean;
inline ">" gt left 6;

func lt(number,number) becomes boolean;
inline "<" lt left 6;

func plus(number,number) becomes number;
inline "+" plus left 4;

func minus(number,number) becomes number;
inline "-" minus left 4;

func multiply(number,number) becomes number;
inline "*" multiply left 3;

func divide(number,number) becomes number;
inline "/" divide left 3;

expr unary_minus(a) 0-a;
inline "-" unary_minus prefix 3;

proc incr(mask number, number);
inline "(+=)" incr left 14;

func len(vec(_)) becomes number;
func ruler_interval(number,number) becomes number;
func ruler_markings(number,number,number) becomes number;

proc assert(boolean,boolean);

func extend(_A,_A) becomes _A;
inline "(+)" extend left 14;

func repeat(number,_A) becomes _A;
inline "(*)" repeat left 14;

func run(number) becomes number;
func derun(number) becomes number;

proc alienate(mask _A);
proc halt(boolean,vec(_A));

proc print(boolean,number,string);
stmt notice(text) { print(true,0,text); }
stmt warn(text) { print(true,1,text); }
stmt error(text) { print(true,2,text); }

func format(_) becomes string;
func comma_format(number) becomes string;

expr push(list,item) [list[] (+) item];
expr append(list,items) [list[] (+) items[]];

func lookup(string,vec(string),number) becomes number;
func in(string,vec(string)) becomes boolean;
func index(number,vec(_A)) becomes _A;

expr find_key(k,src) index(lookup(k,[src[].key],0),src);

expr if(p,a,b) [[b],[a]][(@==1)==p][];

func bytes_to_bool(bytes) becomes boolean;
proc extract_filter(stomp mask number,stomp mask number,stomp mask number,number,number,number,number);
func set_difference(number,number) becomes boolean;
