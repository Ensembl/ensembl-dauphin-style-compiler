stages:
  - setup
  - build-eardo
  - build
  - deploy

variables:
  DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
  DOCKER_TLS_CERTDIR: ""
  BASE: ensembl-k8s-manifests/genome-browser
  NFS_SERVER: ${HL_NFS_SERVER_CODON}
  NFS_PATH: ${HL_NFS_PATH_CODON}

.build-eardo:
  stage: build-eardo
  image: dockerhub.ebi.ac.uk/ensembl-web/peregrine-eard:latest

  script:
    - cd backend-server
    - ./build-begs.sh

  artifacts:
    name: eardo_artifacts
    paths:
      - backend-server/egs-data/begs/render16.eardo

.base-be-rules:
  rules:
    - if: '$CI_DEPLOY_FREEZE == null'
      changes:
        - backend-server/**/*
      when: on_success
    - when: never

.base-be-deploy-rules:
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "master"'
      changes:
        - backend-server/**/*
      when: manual
    - when: never

.base-be-deploy-rules-branches:
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && ( $CI_COMMIT_BRANCH != "master" || $CI_COMMIT_BRANCH != "staging" )'
      changes:
        - backend-server/**/*
      when: on_success
    - when: never

.build_backend:
  extends: .base-be-rules
  stage: build
  image: docker
  services:
    - docker:dind

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd backend-server

  script:
    - docker build -t ${DOCKER_IMAGE} --no-cache .
    - docker push ${DOCKER_IMAGE}
    - docker rmi ${DOCKER_IMAGE}
    - docker logout $CI_REGISTRY

.deploy_backend_base:
  stage: deploy
  image: dockerhub.ebi.ac.uk/ensembl-web/deploy-tools:latest
  before_script:
    - kubectl config use-context ${AGENT}
    - kubectl config set-context --current --namespace=${NS} 
  script:
    # Download kustomize manifests and update nfs server/path
    - git clone --depth 1 --branch k8s123-migration https://gitlab.ebi.ac.uk/ensembl-web/ensembl-k8s-manifests.git
    - sed -i "s#<NFS_SERVER>#${NFS_SERVER}#g" ${BASE}/hi/nfs-deployment.patch.yaml
    - sed -i "s#<NFS_PATH>#${NFS_PATH}#g" ${BASE}/hi/nfs-deployment.patch.yaml
    - sed -i "s#<NFS_SERVER>#${NFS_SERVER}#g" ${BASE}/lo/nfs-deployment.patch.yaml
    - sed -i "s#<NFS_PATH>#${NFS_PATH}#g" ${BASE}/lo/nfs-deployment.patch.yaml
    # Update docker image
    - cd ${BASE}/deploy
    - kustomize edit set image DOCKER_IMAGE=${DOCKER_IMAGE}
    # Build hi/lo deployment/configmap manifests and apply
    - kubectl apply -k .

.deploy_backend:
  extends:
    - .deploy_backend_base
    - .base-be-deploy-rules

.deploy_backend_review:
  extends:
    - .deploy_backend_base
    - .base-be-deploy-rules-branches

BE-eardo:
  extends: .build-eardo

BE-Docker:
  extends: .build_backend

Prod:
  extends: .deploy_backend
  environment:
    name: production
  variables:
    AGENT: ${PROD_AGENT}
    NS: ${PROD_NS}

Fallback:
  extends: .deploy_backend
  environment:
    name: fallback
  variables:
    AGENT: ${FALLBACK_AGENT}
    NS: ${FALLBACK_NS}

Staging:
  extends: .deploy_backend
  environment:
    name: staging
  variables:
    AGENT: ${STAGING_AGENT}
    NS: ${STAGING_NS}

Internal:
  extends: .deploy_backend
  environment:
    name: internal
  variables:
    AGENT: ${INTERNAL_AGENT}
    NS: ${INTERNAL_NS}

Dev:
  extends: .deploy_backend
  environment:
    name: development
  variables:
    AGENT: ${DEV_AGENT}
    NS: ${DEV_NS}

Review:
  extends: .deploy_backend_review
  environment:
    name: development
  variables:
    AGENT: ${REVIEW_AGENT}
    NS: ${CI_COMMIT_REF_SLUG}

Review:Setup:
  stage: setup
  image: dockerhub.ebi.ac.uk/ensembl-web/deploy-tools:latest
  environment:
    name: development
  variables:
    AGENT: ${DEV_AGENT}
    NS: ${CI_COMMIT_REF_SLUG}
  rules: # Run only when a new branch is created
    - if: $CI_PIPELINE_SOURCE == "push" && 
          $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"
      when: on_success
    - when: never
  before_script:
    - kubectl config use-context ${AGENT}
    # Check for review namespace and remove ingress for default GB backend
    - kubectl get namespace ${NS} || (echo "Please create '${NS}' branch in ensembl-client and restart this pipeline" && exit 1)
    - kubectl -n ensembl-dev delete ingress genome-browser-server-ingress-hi-${NS} || true
    - kubectl -n ensembl-dev delete ingress genome-browser-server-ingress-lo-${NS} || true
    - kubectl config set-context --current --namespace=${NS}
  script:
    # Download kustomize manifests and update nfs server/path
    - git clone --depth 1 --branch k8s123-migration https://gitlab.ebi.ac.uk/ensembl-web/ensembl-k8s-manifests.git
    # Prepare/apply secrets, configmap, hi/lo service and ingress manifests
    - cd ensembl-k8s-manifests
    - kubectl apply -f genome-browser/review/sources-toml-configmap.yaml
    - sed -i "s#<MC_PREFIX>#${NS}#g" genome-browser/review/secrets.yaml
    - kubectl apply -f genome-browser/review/secrets.yaml
    - cp genome-browser/review/hi/svc/*.yaml ./ # kustomize restrictions workaround
    - kubectl apply -k .
    - cp genome-browser/review/lo/svc/*.yaml ./
    - kubectl apply -k .
    - cp review-setup/ingress-host.patch.yaml ./
    - sed -i "s#<HOST>#${NS}.review.ensembl.org#g" ingress-host.patch.yaml
    - cp genome-browser/review/hi/*.yaml ./
    - kubectl apply -k .
    - cp genome-browser/review/lo/*.yaml ./
    - kubectl apply -k .
