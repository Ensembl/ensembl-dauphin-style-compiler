stages:
  - build-eardo
  - build
  - deploy

variables:
  DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
  DOCKER_TLS_CERTDIR: ""
  BASE: backend-server/k8s/base

.build-eardo:
  stage: build-eardo
  image: dockerhub.ebi.ac.uk/ensembl-web/peregrine-eard:latest

  # rules:
  #   - if: '$CI_DEPLOY_FREEZE == null'
  #     changes:
  #       - backend-server/egs-data/egs/*.eard
  #     when: always
  #   - when: never

  script:
    - build_begs.sh

  artifacts:
    name: eardo_artifacts
    paths:
      - backend-server/egs-data/begs/render16.eardo

.base-be-rules:
  rules:
    - if: '$CI_DEPLOY_FREEZE == null'
      changes:
        - backend-server/**/*
      when: always
    - when: never

.base-be-deploy-rules:
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "master"'
      changes:
        - backend-server/**/*
      when: always
    - when: never

.base-be-deploy-rules-branches:
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && ( $CI_COMMIT_BRANCH != "master" || $CI_COMMIT_BRANCH != "staging" )'
      changes:
        - backend-server/**/*
      when: always
    - when: never

.build_backend:
  extends: .base-be-rules
  stage: build
  image: docker
  services:
    - docker:dind

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd backend-server

  script:
    - docker build -t ${DOCKER_IMAGE} --no-cache .
    - docker push ${DOCKER_IMAGE}
    - docker rmi ${DOCKER_IMAGE}
    - docker logout $CI_REGISTRY

.deploy_backend:
  extends: .base-be-deploy-rules
  stage: deploy
  image: dockerhub.ebi.ac.uk/ensembl-web/deploy-tools:0.4
  before_script:
    - sed -i "s#<NFS_SERVER>#${NFS_SERVER}#g" ${BASE}/hi/patch.yaml
    - sed -i "s#<NFS_PATH>#${NFS_PATH}#g" ${BASE}/hi/patch.yaml
    - sed -i "s#<NFS_SERVER>#${NFS_SERVER}#g" ${BASE}/lo/patch.yaml
    - sed -i "s#<NFS_PATH>#${NFS_PATH}#g" ${BASE}/lo/patch.yaml

  script:
    # Update hi configuration
    - cd ${BASE}/hi
    - kustomize edit set image DOCKER_IMAGE=${DOCKER_IMAGE}
    - kustomize edit add label "app":"new-genome-browser-server"
    - kustomize edit set label "gbtype":"hi"
    - kustomize edit set namesuffix -- -hi
    - cd -

    # Update lo configuration
    - cd ${BASE}/lo
    - kustomize edit set image DOCKER_IMAGE=${DOCKER_IMAGE}
    - kustomize edit add label "app":"new-genome-browser-server"
    - kustomize edit set label "gbtype":"lo"
    - kustomize edit set namesuffix -- -lo
    - cd -

    # Update hi/lo configuration
    - kustomize build ${BASE}/hi | kubectl apply -f -
    - kustomize build ${BASE}/lo | kubectl apply -f -

  needs: ["BE-Docker"]

.deploy_backend_branches:
  extends: .base-be-deploy-rules-branches
  environment:
    name : wp-hx-dev
  stage: deploy
  image: dockerhub.ebi.ac.uk/ensembl-web/deploy-tools:0.4
  variables:
    BASE: backend-server/k8s/overlays/review
    NFS_SERVER: ${HX_NFS_SERVER}
    NFS_PATH: ${HX_NFS_PATH}
  before_script:
    - sed -i "s#<NFS_SERVER>#${NFS_SERVER}#g" ${BASE}/hi/patch.yaml
    - sed -i "s#<NFS_PATH>#${NFS_PATH}#g" ${BASE}/hi/patch.yaml
    - sed -i "s#<NFS_SERVER>#${NFS_SERVER}#g" ${BASE}/lo/patch.yaml
    - sed -i "s#<NFS_PATH>#${NFS_PATH}#g" ${BASE}/lo/patch.yaml

  script:
    # Update hi configuration
    - cd ${BASE}/hi
    - kustomize edit set image DOCKER_IMAGE=${DOCKER_IMAGE}
    - kustomize edit add label "app":"new-genome-browser-server"
    - kustomize edit add label "gbtype":"${CI_COMMIT_REF_SLUG}-hi"
    - kustomize edit set namesuffix -- -${CI_COMMIT_REF_SLUG}-hi
    - cd -

    # Update lo configuration
    - cd ${BASE}/lo
    - kustomize edit set image DOCKER_IMAGE=${DOCKER_IMAGE}
    - kustomize edit add label "app":"new-genome-browser-server"
    - kustomize edit add label "gbtype":"${CI_COMMIT_REF_SLUG}-lo"
    - kustomize edit set namesuffix -- -${CI_COMMIT_REF_SLUG}-lo
    - cd -

    # Update hi/lo configuration
    - kustomize build ${BASE}/hi | kubectl apply -f -
    - kustomize build ${BASE}/lo | kubectl apply -f -

BE-Eardo:
  extends: .build-eardo

BE-Docker:
  extends: .build_backend

HX:Branches:
  extends: .deploy_backend_branches

HX:Dev:
  extends: .deploy_backend
  environment:
    name : wp-hx-dev
  variables:
    BASE: backend-server/k8s/overlays/dev
    NFS_SERVER: ${HX_NFS_SERVER}
    NFS_PATH: ${HX_NFS_PATH}

HX:Staging:
  extends: .deploy_backend
  environment:
    name : wp-hx-staging
  variables:
    BASE: backend-server/k8s/overlays/staging
    NFS_SERVER: ${HX_NFS_SERVER}
    NFS_PATH: ${HX_NFS_PATH}
    
HL:Staging:
  extends: .deploy_backend
  environment:
    name : wp-hh-staging
  variables:
    BASE: backend-server/k8s/overlays/staging
    NFS_SERVER: ${HL_NFS_SERVER}
    NFS_PATH: ${HL_NFS_PATH}

HX:Internal:
  extends: .deploy_backend
  environment:
    name : wp-hx-internal
  variables:
    BASE: backend-server/k8s/overlays/internal
    NFS_SERVER: ${HX_NFS_SERVER}
    NFS_PATH: ${HX_NFS_PATH}

HL:Internal:
  extends: .deploy_backend
  environment:
    name : wp-hh-internal
  variables:
    BASE: backend-server/k8s/overlays/internal
    NFS_SERVER: ${HL_NFS_SERVER}
    NFS_PATH: ${HL_NFS_PATH}

HX:Production:
  extends: .deploy_backend
  environment:
    name : wp-hx-live
  variables:
    BASE: backend-server/k8s/overlays/production
    NFS_SERVER: ${HX_NFS_SERVER}
    NFS_PATH: ${HX_NFS_PATH}

HL:Production:
  extends: .deploy_backend
  environment:
    name : wp-hh-live
  variables:
    BASE: backend-server/k8s/overlays/production
    NFS_SERVER: ${HL_NFS_SERVER}
    NFS_PATH: ${HL_NFS_PATH}
