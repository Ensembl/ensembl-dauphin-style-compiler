import "lib:std"; use "std";
import "lib:peregrine"; use "peregrine";
import "file:common8.egs"; use "common8";

/* This program uses a *lot* of confusingly similar variables which are named
 * systematically for precision.
 *
 * (property)_(item)_[by_(index)]
 *
 * property:
 * start/end -- a start/end coordinate
 * id_X -- which id (type X)
 * text -- some text
 * sd -- strand
 * gbt -- gene biotype
 * tbt -- transcript biotype
 * al -- an allotment
 * pt -- a patina
 * num -- how many
 * which_X -- which X does this belong to, ie what index in data?
 * idx_X_(in_Y) -- the nth X (in Y) (ie enumeration, zero based)
 *
 * item:
 * gn -- gene
 * tr -- transcript
 * ex -- exon (both thick and thin)
 * thex -- thick exon (ie only those with some thick part)
 * focus -- focus gene
 * tk -- track (the five tracks which we can write to)
 * (al, text and pt just use their name)
 *
 * index:
 * what each item corresponds to. For example
 * al_under_by_gn: "under" allotment with one entry per gene, in order
 * al_under_by_tr: "under" allotment with one entry per transcript, in order
 *
 * examples:
 * idx_tr_in_gn: this is 1st, 2nd, 3rd, etc transcript of its gene
 * idx_tr_in_gn_by_ex: for each exon, it is in the 1st, 2nd, 3rd, etc transcript of its gene
 */

/* 
 * actually get the data from the server
 */

req := make_request("self()","transcript",get_region());
data := get_data(req);
halt(only_warm(),[data]);

/*
 * undo the compression applied by the server basically by applying
 * the transforms applied there in reverse order.
 */

focus_id := string_seq(data,"focus_ids");
gene_id := string_seq(data,"gene_ids");
gene_name := string_seq(data,"gene_names");
gene_desc := string_seq(data,"gene_descs");
start_gn := delta_seq(data,"starts");
end_gn := start_gn + delta_seq(data,"lengths");
start_tr := delta_seq(data,"transcripts_starts");
end_tr := start_tr + delta_seq(data,"transcripts_lengths");
gene_designation := classified_seq(data,"gene_designation_keys","gene_designation_values");
transcript_designation := classified_seq(data,"transcript_designation_keys","transcript_designation_values");
gene_biotype := classified_seq(data,"gene_biotypes_keys","gene_biotypes_values");
strand := positive_seq(data,"strands");
transcript_id := string_seq(data,"transcript_ids");
transcript_biotype := classified_seq(data,"transcript_biotypes_keys","transcript_biotypes_values");
strand_string := len([strand]) (*) "reverse strand";
strand_string#[strand>0] := "forward strand";

/* transcript stuff */
num_tr_by_gn := delta_seq(data,"transcript_counts");
which_gn_by_tr := derun(num_tr_by_gn);
start_gn_by_tr := index(which_gn_by_tr,[start_gn]);
end_gn_by_tr := index(which_gn_by_tr,[end_gn]);
transcript_gene_id := index(which_gn_by_tr,[gene_id]);

/* exon stuff */
start_thex := delta_seq(data,"thicks_starts");
end_thex := start_thex + delta_seq(data,"thicks_lengths");

which_tr_by_ex := derun(delta_seq(data,"transcript_exon_counts"));
which_gn_by_ex := index(which_tr_by_ex,[which_gn_by_tr]);
idx_tr_in_gn := run(delta_seq(data,"transcript_counts"));
idx_tr_in_gn_by_ex :=  index(which_tr_by_ex,[idx_tr_in_gn]);

start_ex := delta_seq(data,"transcript_exon_starts");
end_ex := start_ex + delta_seq(data,"transcript_exon_lengths");
id_gn_by_ex := index(which_gn_by_ex,[gene_id]);
exon_focus_id := index(which_gn_by_ex,[focus_id]);
exon_gene_biotype := index(which_gn_by_ex,[gene_biotype]);
exon_strand := index(which_gn_by_ex,[strand]);

/* apply solidity in thick region ... */
/* ... find thick limits for each exon */
exon_thick_limit_start := index(which_tr_by_ex,[start_thex]);
exon_thick_limit_end := index(which_tr_by_ex,[end_thex]);
trunc_left := exon_thick_limit_start>start_ex;
trunc_right := exon_thick_limit_end<end_ex;

/* ... update exons to thick limit */
start_thex := start_ex;
end_thex := end_ex;
start_thex#[trunc_left] := exon_thick_limit_start#[trunc_left];
end_thex#[trunc_right] := exon_thick_limit_end#[trunc_right];

/* ... remove entirely thin exons */
thick_exons := start_thex < end_thex;
start_thex := start_thex#[thick_exons];
end_thex := end_thex#[thick_exons];
idx_tr_in_gn_by_thex := idx_tr_in_gn_by_ex#[thick_exons];

/* 
 * What are the current track settings?
 */

enabled_tracks := get_switch([
    ["track","gene-other-rev"],
    ["track","gene-pc-rev"],
    ["track","gene-other-fwd"],
    ["track","gene-pc-fwd"],
    ["track","focus"]
][]);

potential_tracks_wallpaper := [
    "tracks/track/gene-other-rev/main/background/content",
    "tracks/track/gene-pc-rev/main/background/content",
    "tracks/track/gene-other-fwd/main/background/content",
    "tracks/track/gene-pc-fwd/main/background/content",
    "tracks/track/focus/main/background/content",
];

potential_tracks_trackname := [
    "track:gene-other-rev:header","track:gene-pc-rev:header",
    "track:gene-other-fwd:header","track:gene-pc-fwd:header",
    "track:focus:header"
];

/*

/ <- stack
title/ <- track title
main/ <- overlay
main/background/ <- chevrons (WINDOW)
main/main/ <- bumper
main/main/<id>/ <- stacker
main/main/<id>/diagram/ <- overlay
main/main/<id>/diagram/far-under <- central dotted line
main/main/<id>/diagram/under <- central solid line
main/main/<id>/diagram/far-over <- solid exon box
main/main/<id>/text <- label
main/main/<id>/button <- button

*/

gene_track_styles();

style("**/main/main/",["type"][],["bumper"][]);
style("**/main/main/*/",["type"][],["overlay"][]);
style("**/main/main/*/text",["bump-width"][],["none"][]);
style("**/main/main/*/button",["priority","bump-width"][],["1000","none"][]);
style("**/main/main/*/diagram/",["type"][],["overlay"][]);
style("**/main/main/*/diagram/under",["depth"][],["-3"][]);
style("**/main/main/*/diagram/far-under",["depth"][],["-2"][]);
style("**/main/main/*/diagram/blanking",["depth"][],["1"][]);
style("**/main/main/*/diagram/over",["depth"][],["2"][]);
style("**/main/main/*/diagram/far-over",["depth"][],["3"][]);
style("**/main/background/content",["depth","padding-top"][],["-10","32"][]);

potential_tracks := [
    "tracks/track/gene-other-rev/main/main",
    "tracks/track/gene-pc-rev/main/main",
    "tracks/track/gene-other-fwd/main/main",
    "tracks/track/gene-pc-fwd/main/main",
    "tracks/track/focus/main/main"
];

use_allotments(al_label_by_tk,enabled_tracks,[
    "tracks/track/gene-other-rev/title/content",
    "tracks/track/gene-pc-rev/title/content",
    "tracks/track/gene-other-fwd/title/content",
    "tracks/track/gene-pc-fwd/title/content",
    "tracks/track/focus/title/content",
]);

use_allotments(allotments_letter,enabled_tracks,[
    "tracks/track/gene-other-rev/title/letter/content",
    "tracks/track/gene-pc-rev/title/letter/content",
    "tracks/track/gene-other-fwd/title/letter/content",
    "tracks/track/gene-pc-fwd/title/letter/content",
    "tracks/track/focus/title/letter/content",
]);

use_allotments(allotments_wallpaper,enabled_tracks,potential_tracks_wallpaper);

expanded_genes := list_switch(["buttons","gene","expand"]);

/*
 * Which allotment and track does data go into?
 *
 * There are separate allotments for protein_coding and non-protein_coding
 * and also for forward and reverse strand. As usual there is a fifth 
 * allotment for a focus-feature.
 *
 */

allotment_idx := len([gene_id]) (*) 0;
allotment_idx#[strand>0] (+=) 2;
allotment_idx#[in(gene_biotype,["protein_coding"])] (+=) 1;
focus_gene := list_switch(["focus","gene"]);
allotment_idx#[focus_id==focus_gene] := 4;

allotment_colour_idx := [allotment_idx][true];
allotment_colour_idx#[in(gene_id,[expanded_genes])] := 5;

transcript_allotment_colour_idx := index(which_gn_by_tr,[allotment_colour_idx]);

/*
 * Exon allotments
 */

exon_allotment_idx := len([start_ex]) (*) 0;
exon_allotment_idx#[exon_strand > 0] (+=) 2;
exon_allotment_idx#[in(exon_gene_biotype,["protein_coding"])] (+=) 1;
exon_allotment_idx#[exon_focus_id==focus_gene] := 4;

exon_allotment_colour_idx := len([start_ex]) (*) 0;
exon_allotment_colour_idx#[exon_strand > 0] (+=) 2;
exon_allotment_colour_idx#[in(exon_gene_biotype,["protein_coding"])] (+=) 1;
exon_allotment_colour_idx#[exon_focus_id==focus_gene] := 4;
exon_allotment_colour_idx#[in(id_gn_by_ex,[expanded_genes])] := 5;

thick_exon_allotment_idx := exon_allotment_idx#[thick_exons];
thick_id_gn_by_ex := id_gn_by_ex#[thick_exons];

use_allotment_names(root_allotment_names,enabled_tracks,potential_tracks);
base_allotment_names := [append_group(index(allotment_idx,root_allotment_names),gene_id)];
base_exon_allotment_names := [append_group(index(exon_allotment_idx,root_allotment_names),id_gn_by_ex)];
base_thick_exon_allotment_names := [append_group(index(thick_exon_allotment_idx,root_allotment_names),thick_id_gn_by_ex)];

allotment_names := [append_group(base_allotment_names[],["diagram"][])];
transcript_allotment_names := [index(which_gn_by_tr,allotment_names)];
exon_allotment_names := [append_group(base_exon_allotment_names[],["diagram"][])];
thick_exon_allotment_names := [append_group(base_thick_exon_allotment_names[],["diagram"][])];

al_text_by_gn := use_allotment(append_group(base_allotment_names[],["text"][]));
button_allotment := use_allotment(append_group(base_allotment_names[],["button"][]));
al_under_by_tr := use_allotment(append_group(transcript_allotment_names[],["under"][]));
al_far_under_by_gn := use_allotment(append_group(allotment_names[],["far-under"][]));
al_far_under_by_tr := use_allotment(append_group(transcript_allotment_names[],["far-under"][]));
allotment_far_over := use_allotment(append_group(allotment_names[],["far-over"][]));
al_blanking_by_ex := use_allotment(append_group(exon_allotment_names[],["blanking"][]));
al_over_by_ex := use_allotment(append_group(exon_allotment_names[],["far-over"][]));
al_far_over_by_thex := use_allotment(append_group(thick_exon_allotment_names[],["far-over"][]));

alienate(allotment);

/* 
 * focus object
 */

start_focus := start_gn#[allotment_idx==4];
end_focus := end_gn#[allotment_idx==4];

/*
 * Filter labels by which tracks are configured to have labels
 */

enabled_labels := get_switch([
    ["track","gene-other-rev","label"],
    ["track","gene-pc-rev","label"],
    ["track","gene-other-fwd","label"],
    ["track","gene-pc-fwd","label"],
    ["track","focus","label"],
][]);

enabled_gene_labels := index(allotment_idx,[enabled_labels]);

al_text_by_gn#[enabled_gene_labels==false] := use_allotment("");
al_text_by_gn#[get_switch(["scale","no-labels"])] := use_allotment("");

gene_labels := if(get_switch(["track","gene-pc-fwd","label","id"]),gene_id,gene_name);

track_name := index(allotment_idx,potential_tracks);
transcript_allotment_idx := index(which_gn_by_tr,[allotment_idx]);
transcript_track_name := index(transcript_allotment_idx,potential_tracks);

/*
 * What colour? What font? etc
 *
 * (driven by allotment for gene)
 */

base_non_pc_colour := direct_colour(200,200,200,255);
base_pc_colour := direct_colour(128,128,128,255);
base_focus_colour := direct_colour(39,154,252,255);

dotted_non_pc_colour := barred(direct_colour(255,255,255,255),base_non_pc_colour,4,1,0.25);
dotted_pc_colour := barred(direct_colour(255,255,255,255),base_pc_colour,4,1,0.25);
dotted_focus_colour := barred(direct_colour(255,255,255,255),base_focus_colour,4,1,0.25);
non_pc_colour := spot_colour(base_non_pc_colour);
pc_colour := spot_colour(base_pc_colour);
focus_colour := spot_colour(base_focus_colour);

special_colour := spot_colour(direct_colour(255,200,0,255));
dotted_special_colour := barred(direct_colour(255,255,255,255),direct_colour(255,200,0,255),4,1,0.25);

pt_under_by_tr := patina_filled(index(transcript_allotment_colour_idx,[non_pc_colour,pc_colour,non_pc_colour,pc_colour,focus_colour,special_colour]));

pt_under_dotted_by_tr := patina_hollow(index(transcript_allotment_colour_idx,[dotted_non_pc_colour,dotted_pc_colour,dotted_non_pc_colour,dotted_pc_colour,dotted_focus_colour,dotted_special_colour]),1);
pt_hollow_by_tr := patina_hollow(index(transcript_allotment_colour_idx,[non_pc_colour,pc_colour,non_pc_colour,pc_colour,focus_colour,special_colour]),1);
pt_hollow_by_ex := patina_hollow(index(exon_allotment_colour_idx,[non_pc_colour,pc_colour,non_pc_colour,pc_colour,focus_colour,special_colour]),1);
pt_white := patina_filled(spot_colour(direct_colour(255,255,255,255)));
pt_thick_by_thex := patina_filled(index(exon_allotment_colour_idx#[thick_exons],[non_pc_colour,pc_colour,non_pc_colour,pc_colour,focus_colour,special_colour]));
text_colour := direct_colour(111,129,144,255);
text_size := 10;

textpen := pen("'Lato', sans-serif",text_size,text_colour,[][]);


/*
 * prepare the zmenus
 */

/* metadata */
pt_zmenu_type := patina_zmenu(zmenu(""),["type"],[["gene-and-one-transcript"]][]);

/* transcript part */
transcript_strand_string := index(which_gn_by_tr,[strand_string]);
zmenu_tmpl := zmenu("[<light>Transcript</light> <strong>{transcript_id}</strong>] [<light>{transcript_biotype}</light>] [<light>{strand}</light>] / [<light>{transcript_id}</light>] [<light>{designation}</light>]");
pt_zmenu_tr := patina_zmenu(zmenu_tmpl,["gene_id","transcript_id","transcript_biotype","strand","designation","track","type"],
                                      [[transcript_gene_id],[transcript_id],[transcript_biotype],[transcript_strand_string],[transcript_designation],[transcript_track_name],[len([transcript_gene_id]) (*) "transcript"]][]);

/* gene part */
zmenu_tmpl := zmenu("[<light>Gene</light> {symbol}] / [<strong><focus>{id}</focus></strong>]");
pt_zmenu_gn := patina_zmenu(zmenu_tmpl,["symbol","id","track","type"],[[gene_name],[gene_id],[track_name],["gene"]][]);

/*
 * draw everything!
 */

/* Draw central dotted line and end stops */
c := idx_tr_in_gn * 20;
nw := spacebase(start_gn_by_tr, c,   0);
w  := spacebase(start_gn_by_tr, c+3, 0);
sw := spacebase(start_gn_by_tr, c+6, 0);

ne := spacebase(end_gn_by_tr,   c,   0);
e  := spacebase(end_gn_by_tr,   c+4, 0);
se := spacebase(end_gn_by_tr,   c+6, 0);

rectangle(w,  e,  pt_under_dotted_by_tr, al_far_under_by_tr); // dotted
rectangle(nw, sw, pt_hollow_by_tr,       al_far_under_by_tr); // left stop
rectangle(ne, se, pt_hollow_by_tr,       al_far_under_by_tr); // right stop

/* draw solid line the extent of the transcript */
c := idx_tr_in_gn * 20;
w := spacebase(start_tr,c+3,0);
e := spacebase(end_tr,c+4,0);
rectangle(w,e,pt_under_by_tr,al_under_by_tr);

/* draw hollow and blanking exons */
c := idx_tr_in_gn_by_ex * 20;
a := spacebase(start_ex,c,0);
b := spacebase(end_ex,c+6,0);
rectangle(a,b,pt_hollow_by_ex,al_over_by_ex);
rectangle(a,b,pt_white,al_blanking_by_ex);

/* draw solid exons */
c := idx_tr_in_gn_by_thex * 20;
a := spacebase(start_thex,c,0);
b := spacebase(end_thex,c+6,0);
rectangle(a,b,pt_thick_by_thex,al_far_over_by_thex);

/* zmenu areas */
/* type and gene zmenus */
nw := spacebase(start_gn,0,0);
se := spacebase(end_gn,num_tr_by_gn*20,0);
rectangle(nw,se,pt_zmenu_type,al_far_under_by_gn);
rectangle(nw,se,pt_zmenu_gn,al_far_under_by_gn);

/* transcript zmenus */
c := idx_tr_in_gn * 20;
w := spacebase(start_tr,c,0);
e := spacebase(end_tr,c+20,0);
rectangle(w,e,pt_zmenu_tr,al_far_under_by_tr);

/* label */
text2(spacebase(start_gn,num_tr_by_gn*20-5,0),textpen,gene_labels,al_text_by_gn);

chevron_spacing := [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0][];

image_underneath(chevron_spacing,0,"chevron-left",allotments_wallpaper[@==0]);
image_underneath(chevron_spacing,0,"chevron-left",allotments_wallpaper[@==1]);
image_underneath(chevron_spacing,0,"chevron-right",allotments_wallpaper[@==2]);
image_underneath(chevron_spacing,0,"chevron-right",allotments_wallpaper[@==3]);

/* focus */
focus_strand := strand#[focus_id==focus_gene];
image_underneath(chevron_spacing,0,["chevron-left","chevron-right"][@==focus_strand],allotments_wallpaper[@==4]);

/* track names */
draw_track_names(gene_track_names,gene_name_switches,al_label_by_tk);

/* track category */
draw_track_category("G",allotments_letter);

/* focus swatch */
draw_focus_swatch(allotments_letter[@==4]);

/* red-dotted lines */
al_dots := use_allotment(["","dots/content"][(@==1)==(get_switch(["track","focus"]))]);
red_dotted(start_focus,end_focus,al_dots);

/* blue button */
blue_top_left := spacebase(start_gn,num_tr_by_gn*20+6,0);
blue_bottom_right := spacebase(start_gn,num_tr_by_gn*20+14,12);
blue_colour := spot_colour(direct_colour(239,154,52,255));
green_colour := spot_colour(direct_colour(154,239,52,255));

button_colour := len([start_gn]) (*) blue_colour;
button_colour#[in(gene_id,[expanded_genes])] := green_colour;
button_patina := patina_filled(button_colour);

rectangle(blue_top_left,blue_bottom_right,button_patina,button_allotment);

expand_base := len([gene_id]) (*) "buttons/gene/expand";
expand_switches := append_group(expand_base,gene_id);

sense := len([expand_switches]) (*) true;
sense#[in(gene_id,[expanded_genes])] := false;

blue_hotspot_patina := patina_switch(expand_switches,sense);

rectangle(blue_top_left,blue_bottom_right,blue_hotspot_patina,button_allotment);

