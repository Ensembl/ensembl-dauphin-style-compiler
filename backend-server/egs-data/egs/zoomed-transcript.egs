import "lib:std"; use "std";
import "lib:peregrine"; use "peregrine";
import "file:common.egs"; use "common";

/* 
 * actually get the data from the server
 */

data := get_data("self()","zoomed-transcript",get_region());
halt(only_warm(),[data]);

/*
 * undo the compression applied by the server basically by applying
 * the transforms applied there in reverse order.
 */

focus_id := string_seq(data,"focus_ids");
gene_id := string_seq(data,"gene_ids");
gene_name := string_seq(data,"gene_names");
gene_desc := string_seq(data,"gene_descs");
start := delta_seq(data,"starts");
end := start + delta_seq(data,"lengths");
transcript_start := delta_seq(data,"transcript_starts");
transcript_end := transcript_start + delta_seq(data,"transcript_lengths");
gene_designation := classified_seq(data,"gene_designation_keys","gene_designation_values");
gene_biotype := classified_seq(data,"gene_biotypes_keys","gene_biotypes_values");
strand := positive_seq(data,"strands");
designated_transcript_id := string_seq(data,"designated_transcript_ids");
designated_transcript_biotype := classified_seq(data,"designated_transcript_biotypes_keys","designated_transcript_biotypes_values");
designated_transcript_designation := classified_seq(data,"designated_transcript_designations_keys","designated_transcript_designations_values");
strand_string := len([strand]) (*) "reverse strand";
strand_string#[strand>0] := "forward strand";
/* exon stuff */
exon_strand := positive_seq(data,"exon_strands");
exon_gene_biotype := classified_seq(data,"exon_gene_biotypes_keys","exon_gene_biotypes_values");
exon_start := delta_seq(data,"exon_starts");
exon_end := exon_start + delta_seq(data,"exon_lengths");
exon_gene_indexes := derun(delta_seq(data,"exon_counts"));
/* sequence stuff */
seq_start := delta_seq(data,"seq_starts");
seq_end := seq_start + 1;
seq_letter := classified_seq(data,"seq_keys","seq_values");
seq_rev_letter := base_flip(seq_letter);

thick_start := delta_seq(data,"thick_starts");
thick_end := thick_start + delta_seq(data,"thick_lengths");
exon_gene_indexes := derun(delta_seq(data,"exon_counts"));

/* apply solidity in thick region ... */
/* ... find thick limits for each exon */
exon_thick_limit_start := index(exon_gene_indexes,[thick_start]);
exon_thick_limit_end := index(exon_gene_indexes,[thick_end]);
trunc_left := exon_thick_limit_start>exon_start;
trunc_right := exon_thick_limit_end<exon_end;

/* ... update exons to thick limit */
exon_thick_start := exon_start;
exon_thick_end := exon_end;
exon_thick_start#[trunc_left] := exon_thick_limit_start#[trunc_left];
exon_thick_end#[trunc_right] := exon_thick_limit_end#[trunc_right];

/* ... remove entirely thin exons */
thick_exons := exon_thick_start < exon_thick_end;
thick_exon_gene_indexes := exon_gene_indexes#[thick_exons];
exon_thick_start := exon_thick_start#[thick_exons];
exon_thick_end := exon_thick_end#[thick_exons];

/* 
 * What are the current track settings?
 */

potential_tracks := ["track:gene-other-rev","track:gene-pc-rev","track:gene-other-fwd","track:gene-pc-fwd","track:focus"];
enabled_tracks := get_switch([
    ["track","gene-other-rev"],
    ["track","gene-pc-rev"],
    ["track","gene-other-fwd"],
    ["track","gene-pc-fwd"],
    ["track","focus"]
][]);

tracks_used := ["","","","",""];
tracks_used[enabled_tracks] := potential_tracks[enabled_tracks];

allotments := [use_allotment(tracks_used[])];

use_allotments(allotments_wallpaper,enabled_tracks,[
    "track:gene-other-rev:wallpaper[-2]","track:gene-pc-rev:wallpaper[-2]",
    "track:gene-other-fwd:wallpaper[-2]","track:gene-pc-fwd:wallpaper[-2]",
    "track:focus:wallpaper[-2]"
]);

/*
 * Which allotment and track does data go into?
 *
 * There are separate allotments for protein_coding and non-protein_coding
 * and also for forward and reverse strand. As usual there is a fifth 
 * allotment for a focus-feature.
 *
 * For the data on each allotment there are currently two tracks: the
 * main data and the labels.
 */

allotment_idx := len([gene_id]) (*) 0;
allotment_idx#[strand > 0] (+=) 2;
allotment_idx#[in(gene_biotype,["protein_coding"])] (+=) 1;
focus_gene := list_switch(["focus","gene"]);
allotment_idx#[focus_id==focus_gene] := 4;
allotment := index(allotment_idx,allotments);

track_name := index(allotment_idx,potential_tracks);

/*
 * Filter labels by which tracks are configured to have labels
 */

enabled_labels := get_switch([
    ["track","gene-other-rev","label"],
    ["track","gene-pc-rev","label"],
    ["track","gene-other-fwd","label"],
    ["track","gene-pc-fwd","label"],
    ["track","focus","label"],
][]);

enabled_gene_labels := index(allotment_idx,[enabled_labels]);

text_allotment := allotment;
text_allotment#[enabled_gene_labels==false] := use_allotment("");
text_allotment#[get_switch(["scale","no-labels"])] := use_allotment("");

gene_labels := if(get_switch(["track","gene-pc-fwd","label","id"]),gene_id,gene_name);

/*
 * What colour? What font? etc
 *
 * (driven by allotment for gene)
 */

normal_text_colour := direct_colour(111,129,144,255);
focus_text_colour := direct_colour(39,154,252,255);

text_colour := index(allotment_idx,[normal_text_colour,normal_text_colour,normal_text_colour,normal_text_colour,focus_text_colour]);

thick_text_colour := direct_colour(255,255,255,255);

text_size := 12;

normal_thick_colour := direct_colour(148,160,171,255);
focus_thick_colour := direct_colour(39,154,252,255);

thick_colour := index(allotment_idx,[normal_thick_colour,normal_thick_colour,normal_thick_colour,normal_thick_colour,focus_thick_colour]);

thick_seq_colour := simple_colour(thick_colour);
thin_seq_colour := simple_colour(text_colour);
thick_seq_patina := patina_filled(thick_seq_colour);
thin_seq_patina := patina_hollow(thin_seq_colour,1);

thick_textpen := pen("'Lato', sans-serif",text_size,thick_text_colour,thick_colour);
thin_textpen := pen("'Lato', sans-serif",text_size,thick_colour,[][]);

/*
 * prepare the zmenus
 */

// TODO multiline strings

/* transcript part */
zmenu_tmpl := zmenu("[<light>Transcript</light> <strong>{transcript_id}</strong>] [<light>{transcript_biotype}</light>] [<light>{strand}</light>] / [<light>{transcript_id}</light>] [<light>{designation}</light>]");
tr_zmenu_patina := patina_zmenu(zmenu_tmpl,["transcript_id","transcript_biotype","strand","designation","track","type"],
                                      [[designated_transcript_id],[designated_transcript_biotype],[strand_string],[designated_transcript_designation],[track_name],["transcript"]][]);

/* find thick exon regions */

/* gene part */
zmenu_tmpl := zmenu("[<light>Gene</light> {symbol}] / [<strong><focus>{id}</focus></strong>]");
ge_zmenu_patina := patina_zmenu(zmenu_tmpl,["symbol","id","track","type"],[[gene_name],[gene_id],[track_name],["gene"]][]);

/* thick letters */
extract_filter(thick_seq_start,thick_seq_index,thick_seq_exon_index,seq_start,seq_end,exon_thick_start,exon_thick_end);
thick_seq_gene_index := index(thick_seq_exon_index,[thick_exon_gene_indexes]);
thick_seq_letter := index(thick_seq_index,[seq_letter]);
thick_seq_rev_letter := index(thick_seq_index,[seq_rev_letter]);
thick_seq_gene_strand := index(thick_seq_gene_index,[strand]);
thick_seq_letter#[thick_seq_gene_strand==0] := thick_seq_rev_letter#[thick_seq_gene_strand==0];
thick_seq_allotment := index(thick_seq_gene_index,[allotment]);

alienate(thick_seq_allotment);
alienate(thin_seq_allotment);

indented_rectangle_on_genome(thick_seq_start,thick_seq_start+1,12,thick_seq_patina,thick_seq_allotment);
coords := spacebase(thick_seq_start + 0.5,0,-4);
text2(coords,thick_textpen,thick_seq_letter,thick_seq_allotment);

/* thin letters */
extract_filter(thin_seq_start,thin_seq_index,thin_seq_gene_index,seq_start,seq_end,transcript_start,transcript_end);
thin_seq_letter := index(thin_seq_index,[seq_letter]);
thin_seq_rev_letter := index(thin_seq_index,[seq_rev_letter]);
thin_seq_gene_strand := index(thin_seq_gene_index,[strand]);
thin_seq_letter#[thin_seq_gene_strand==0] := thin_seq_rev_letter#[thin_seq_gene_strand==0];
thin_seq_allotment := index(thin_seq_gene_index,[allotment]);

indented_rectangle_on_genome(thin_seq_start,thin_seq_start + 1,12,thin_seq_patina,thin_seq_allotment);
coords := spacebase(thin_seq_start + 0.5,0,-4);
text2(coords,thin_textpen,thin_seq_letter,thin_seq_allotment);

/* zmenus */
rectangle_on_genome(start,end,16,tr_zmenu_patina,allotment);
rectangle_on_genome(start,end,16,ge_zmenu_patina,allotment);

/* track names */
draw_track_names(gene_track_names,gene_name_switches,allotments_wallpaper);

/* track category */
draw_track_category("G",[use_allotment(gene_cat_allotments[])]);

/* focus swatch */
draw_focus_swatch();
