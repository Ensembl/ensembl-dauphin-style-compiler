program "ensembl-webteam/core" "zoomed-transcript" 1;
refer "libperegrine";
refer "libeoe";
include "../common/track-common.eard";
include "../common/track-style.eard";
include "gene-common-data.eard";
include "gene-common-visual.eard";
include "gene-common-zmenu.eard";
include "transcript-common.eard";

/* Set styles */

track_styles();
gene_styles();
transcript_styles();

let tr_sep = 25;

let enabled_tracks = enabled_gene_tracks();

let no_letters = setting_boolean("scale-no-letters",[]);

/* Get main data */

let all_expanded = setting_string_seq("expanded",[]);
let (*gene,*tr,*exon) = get_transcript_data(all_expanded);
let gene.leaf_index = allocate_genes_to_leaf_index(*gene);

let **tr_gene = index(**gene,tr.index_of_gene);

let tr_gene.leaf_index = index(gene.leaf_index,tr.index_of_gene);
let tr.leaf_index = tr_gene.leaf_index;

let (focus_genome_id,focus_gene_id) = focus_gene_settings();
let focus_gene_index = position(focus_gene_id==gene.id_unversioned); 


let expanded_ids = setting_string_keys("expanded",[],gene.id_versioned);
let expanded_ids = select(expanded_ids,expanded_ids!="");

let (shown_tr,last_tr) = calc_shown_transcripts(*gene,*tr,enabled_several_transcripts(),expanded_ids);
let gene.leaf_base = make_gene_leaf_base(*gene);

let *leaf_tr = tr_gene_leafs(*gene,*tr,shown_tr);
let **exon_tr = index(**tr,exon.index_of_tr);
let **leaf_exon_tr = index(**leaf_tr,exon.index_of_tr);

/* Get sequence data */

let seq_data = get_data(request("self()","zoomed-seq"));
let sequence = data_string(seq_data,"sequence");
let sequence_rev = base_flip(sequence);
let sequence_start = index(data_number(seq_data,"sequence_start"),0);

/* Empty box to stop broswer jumping round when there's nothing to draw */

let leaf = leaf_tr.far_under_leaf;
let y = tr.position_in_gene * tr_sep;
empty(coord(tr.start,y,[0,...]),coord(tr.end,y+tr_sep,[0,...]),leaf_tr.far_under_leaf);

/* Dotted lines */

let *dots = calc_outside_of_tr(*tr_gene,*tr,*leaf_tr);
let colours = index(gene_colours(),dots.leaf_index);
let paint = paint_dotted([colour!("white"),...],colours,4,0,0.5);
let y = dots.position_in_gene * tr_sep;
rectangle(coord(dots.start,y+5,[0,...]),coord(dots.end,y+5,[0,...]),paint,dots.leaf);

/* Generate thick (ie non-UTR) exon positions */

let *thick_exon = generate_thick_exons(*tr,*exon_tr,*exon);

/* Restrict base-level ranges to on-screen region as our operations are costly */

let (bp_start,bp_end) = bp_range();

let exon.start = max(exon.start,bp_start);
let exon.end = max(min(exon.end,bp_end),exon.start);

let thick_exon.start = max(thick_exon.start,bp_start);
let thick_exon.end = min(thick_exon.end,bp_end);

// TODO forget about non-displayed exons early

/* Non-UTR exons (ie "solid, reversed-out bases") */

procedure bp_letters(position,strand,sequence,sequence_rev,sequence_start) {
    let seq_position = position - sequence_start;
    let fwd_letter = index(sequence,seq_position);
    let rev_letter = index(sequence_rev,seq_position);
    if(strand>0,fwd_letter,rev_letter)
}

procedure startend_to_bp(start,end) {
    let bp_index = count(end-start);
    let bp_pos = enumerate(end-start) + index(start,bp_index);
    (bp_pos,bp_index)
}

let (bp.position,index_of_thick_exon) = startend_to_bp(thick_exon.start,thick_exon.end);
let bp.index_of_exon = index(thick_exon.index_of_exon,index_of_thick_exon);
let **bp_exon = index(**exon,bp.index_of_exon);
let **bp_tr = index(**exon_tr,bp.index_of_exon);
let **bp_gene = index(**gene,bp_exon.index_of_gene);
let **bp_leaf = index(**leaf_exon_tr,bp.index_of_exon);
let bp.letter = bp_letters(bp.position,bp_gene.strand,sequence,sequence_rev,sequence_start);

let colours = index(gene_colours(),bp_tr.leaf_index);
let paint = paint_solid(colours);
let y = index(tr.position_in_gene,bp_exon.index_of_tr) * tr_sep;
rectangle(coord(bp.position,y,[1,...]),coord(bp.position+1,y+14,[-1,...]),paint,bp_leaf.over_leaf);

let pen = pen("'IBM Plex Mono', sans-serif",12,[colour!("white"),...],[colour!("transparent"),...]);
text(coord(bp.position+0.5,y+2,[-3,...]),pen,bp.letter,if(no_letters,[leaf(""),...],bp_leaf.far_over_leaf));

/* pale backing rectangle when in noletter mode to keep exons darker than introns */
let back_leaf = index(leaf_exon_tr.under_leaf,thick_exon.index_of_exon);
let y = index(exon_tr.position_in_gene,thick_exon.index_of_exon) * tr_sep;
rectangle(coord(thick_exon.start,y,[0,...]),coord(thick_exon.end,y+14,[0,...]),paint_solid(colour!("#999")),back_leaf);

/* UTR exons */
procedure utr_letters(start,end,sequence,sequence_rev,sequence_start) {
    capture *tr,*exon,*exon_tr,*gene,*leaf_exon,*leaf_exon_tr, no_letters, tr_sep;

    let (position,index_of_exon) = startend_to_bp(start,end);
    let **bp_exon = index(**exon,index_of_exon);
    let **bp_tr = index(**exon_tr,index_of_exon);
    let **bp_gene = index(**gene,bp_exon.index_of_gene);
    let **bp_leaf = index(**leaf_exon_tr,index_of_exon);
    let bp.letter = bp_letters(position,bp_gene.strand,sequence,sequence_rev,sequence_start);

    let y = bp_tr.position_in_gene * tr_sep;
    let colours = index(gene_colours(),bp_tr.leaf_index);
    let paint = paint_hollow(colours,1);
    rectangle(coord(position,y,[1,...]),coord(position+1,y+13,[-1,...]),paint,bp_leaf.over_leaf);

    let pen = pen("'IBM Plex Mono', sans-serif",12,colours,[colour!("transparent"),...]);
    text(coord(position+0.5,y+2,[-3,...]),pen,bp.letter,if(no_letters,[leaf(""),...],bp_leaf.far_over_leaf));
}

let left_end = max(min(exon.end,exon_tr.thick_start),exon.start);
utr_letters(exon.start,left_end,sequence,sequence_rev,sequence_start);
let right_start = min(max(exon.start,exon_tr.thick_end),exon.end);
utr_letters(right_start,exon.end,sequence,sequence_rev,sequence_start);

/* introns */

screen_tr_start = max(tr.start,bp_start);
screen_tr_end = max(min(tr.end,bp_end),screen_tr_start);

let (line.start,line.end,line.index_of_tr) = 
    gaps(screen_tr_start,screen_tr_end,exon.start,exon.end,exon.index_of_tr);

/* intron lines (if no letters) */

let colours = paint_hollow(index(gene_colours(),index(tr.leaf_index,line.index_of_tr)),1);
let leaf = index(leaf_tr.under_leaf,line.index_of_tr);
let y = index(tr.position_in_gene,line.index_of_tr) * tr_sep;
rectangle(coord(line.start,y+7,[0,...]),coord(line.end,y+8,[0,...]),colours,if(no_letters,leaf,[leaf(""),...]));

/* intron letters */

let (position,bp_index_of_line) = startend_to_bp(line.start,line.end);
let bp_index_of_tr = index(line.index_of_tr,bp_index_of_line);
let bp_strand = index(tr.index_of_gene,bp_index_of_tr);
let line.letter = bp_letters(position,bp_strand,sequence,sequence_rev,sequence_start);

let colours = index(gene_colours(),index(tr.leaf_index,bp_index_of_tr));
let pen = pen("'IBM Plex Mono', sans-serif",12,colours,[colour!("transparent"),...]);
let leaf = index(leaf_tr.under_leaf,bp_index_of_tr);
let y = index(tr.position_in_gene,bp_index_of_tr) * tr_sep;
text(coord(position+0.5,y+2,[-3,...]),pen,line.letter,if(no_letters,[leaf(""),...],leaf));

/* Draw labels */

let text = tr_label_text(*gene,*tr_gene,*tr,last_tr,enabled_gene_labels(),enabled_transcript_labels());
let y = tr.position_in_gene * tr_sep;
let pen = pen("'IBM Plex Mono', sans-serif",10,[colour!("#6f81ff"),...],[colour!("transparent"),...]);
running_text(coord(tr_gene.start,y+15,[0,...]),coord(tr_gene.end,y+15,[0,...]),pen,text,leaf_tr.text_leaf);

/* Draw zmenus */

emit_tr_zmenu(*tr_gene,*tr,*leaf_tr,tr_sep);

/* Draw track furniture */

let leaf.bgd = make_gene_leafs("main/background/content",enabled_tracks);
let leaf.trackname = make_gene_leafs("title/content",enabled_tracks);
let leaf.letter = make_gene_leafs("main/letter/content",enabled_tracks);

draw_gene_track_names(*leaf);
draw_gene_track_category(*leaf);

/* Lozenges */

let tr.position = tr.position_in_gene;
let tr_all_shown = tr_all_tr_shown(*gene,*tr,shown_tr);
draw_all_lozenges(*tr,*tr_gene,*leaf_tr,last_tr,tr_all_shown,20,false);
