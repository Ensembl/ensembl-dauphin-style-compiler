program "ensembl-webteam/core" "ruler" 1;
refer "libperegrine";
include "track-common.eard";
include "track-style.eard";

/* Setup styles */

track_styles();

style!("""
    **/ruler/ {
        type: overlay;
        priority: -1000;
    }

    **/ruler/background/ {
        type: overlay;
        depth: 55;
    }

    **/ruler/main/ {
        system: tracking-window;
    }

    **/ruler/main/content {
        depth: 55;
    }

    **/ruler/background/underlay {
        depth: 53;
    }

    **/ruler/background/overlay {
        depth: 58;
    }

    window-top/ {
        system: window;
        priority: -1000;
        type: overlay;
    }
""");

// halt(only_warm(),[]);

/* Get settings */

let one_based = setting_boolean("one_based",[]);
let mark_delta = if(one_based,1,0);

/* Calculate markings to use for ruler */

/* What multiples are allowed? 
 * The more values in this list better chance at having acceptable number of ruler elements.
 * On the other hand some values (other than 1) may seem odd to user. Suggest [1,2] or [1,2,5].
 *  1 = 1xxxx, 2xxxx, 3xxxx, 4xxxx, ...
 *  2 = 2xxxx, 4xxxx, 8xxxx, ...
 *  5 = 10xxxx, 15xxxx, 20xxxx, 25xxxx, ...
 */
let seps_allowed = [1,2,5];
let max_marks_on_screen = 12;
let (bp_left,bp_right) = bp_range();
let interval = ruler_interval(bp_right-bp_left,max_marks_on_screen,seps_allowed);
let markings = ruler_markings(interval,bp_left,bp_right);
let numbers = comma_format(markings + mark_delta);

/* Draw things! */
let ruler_bp_leaf = leaf("window-top/ruler/main/content"); // follows scroll
let ruler_under_leaf = leaf("window-top/ruler/background/underlay"); // static on screen, underneath
let ruler_over_leaf = leaf("window-top/ruler/background/overlay"); // static on screen, on top

let pen = pen("'IBM Plex Mono', sans-serif",12,colour!("#787878"),colour!("transparent"));
let paint = paint_hollow(colour!("#787878"),1);
let bgd_paint = paint_solid(colour!("white"));

/* Draw white background */
rectangle(coord([0],[0],[0]),coord([1],[16],[0]),bgd_paint,[ruler_under_leaf,...]);
rectangle(coord([0],[-1],[0]),coord([1],[-16],[0]),bgd_paint,[ruler_under_leaf,...]);

/* Draw fiddly bp rectangle */
/* ... top ruler */
rectangle(coord([0],[0],[48]),coord([0],[16],[48]),paint,[ruler_over_leaf,...]); // sep, vert
rectangle(coord([0],[16],[0]),coord([0],[16],[48]),paint,[ruler_over_leaf,...]); // sep, horiz
text(coord([0],[2],[4]),pen,["bp"],[ruler_over_leaf]);
/* ... bottom ruler */
rectangle(coord([0],[-1],[48]),coord([0],[-16],[48]),paint,[ruler_over_leaf,...]); // sep, vert
rectangle(coord([0],[-16],[0]),coord([0],[-16],[48]),paint,[ruler_over_leaf,...]); // sep, horiz
text(coord([0],[-14],[4]),pen,["bp"],[ruler_over_leaf]);

/* Draw numbers */
text(coord(markings,[2,...],[4,...]),pen,numbers,[ruler_bp_leaf,...]);
text(coord(markings,[-14,...],[4,...]),pen,numbers,[ruler_bp_leaf,...]);

/* Draw ticks */
rectangle(coord(markings,[0,...],[0,...]),coord(markings,[16,...],[0,...]),paint,[ruler_bp_leaf,...]);
rectangle(coord(markings,[-1,...],[0,...]),coord(markings,[-16,...],[0,...]),paint,[ruler_bp_leaf,...]);

/* Draw the separating line */
rectangle(coord([0],[16],[0]),coord([1],[16],[0]),paint,[ruler_over_leaf,...]);
rectangle(coord([0],[-16],[0]),coord([1],[-16],[0]),paint,[ruler_over_leaf,...]);

/* Setup maypole "special zone" */
let maypole_paint = paint_special("maypole");
rectangle(coord([0],[0],[0]),coord([1],[16],[0]),maypole_paint,[ruler_under_leaf,...]);
rectangle(coord([0],[-1],[0]),coord([1],[-16],[0]),maypole_paint,[ruler_under_leaf,...]);
