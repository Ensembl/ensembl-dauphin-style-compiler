program "ensembl-webteam/core" "variant-zoomed" 1;
refer "libperegrine";
refer "libeoe";
include "../common/track-common.eard";
include "../common/track-style.eard";
include "variant-common.eard";
include "focus-variant-zmenu.eard";
include "variation-style.eard";

/* Setup styles */

track_styles();

let track_id = setting_string("track_id", []);
let track_data_id = setting_string("track_data_id", []);
let track_name = setting_string("track_name", []);
let track_display_order = setting_string("display_order", []);

let track_leaf_id = push_str("tracks/track/", track_id);
track_leaf_id = push_str(track_leaf_id, "/");
let track_main_shore_leaf_id = push_str(track_leaf_id, "main/main/shore/");
let track_main_shore_under_leaf_id = push_str(track_main_shore_leaf_id, "under/");
let track_main_shore_over_leaf_id = push_str(track_main_shore_leaf_id, "over/");
let track_main_sea_leaf_id = push_str(track_leaf_id, "main/main/sea/");
let track_main_sea_shallow_leaf_id = push_str(track_main_sea_leaf_id, "shallow/");
let track_main_sea_shallow_all_leaf_id = push_str(track_main_sea_shallow_leaf_id, "*");
let track_main_sea_deep_leaf_id = push_str(track_main_sea_leaf_id, "deep/");
let track_main_sea_deep_all_leaf_id = push_str(track_main_sea_leaf_id, "*");


style(
  track_leaf_id,
  [
    "priority",
    "report"
  ], [
    track_display_order,
    push_str("track;switch-id=", track_id)
  ]
);
style(
  track_main_shore_leaf_id,
  [
    "padding-top",
    "type",
    "priority"
  ],
  [
    "2",
    "overlay",
    "0"
  ]
);
style(
  track_main_shore_under_leaf_id,
  [
    "depth"
  ],
  [
    "0"
  ]
);
style(
  track_main_shore_over_leaf_id,
  [
    "depth"
  ],
  [
    "1"
  ]
);
style(
  track_main_sea_leaf_id,
  [
    "min-height",
    "type",
    "priority"
  ],
  [
    "35",
    "stack",
    "1"
  ]
);
style(
  track_main_sea_shallow_leaf_id,
  [
    "type",
    "priority",
    "padding-top",
    "padding-bottom"
  ],
  [
    "wall",
    "0",
    "4",
    "4"
  ]
);
style(
  track_main_sea_shallow_all_leaf_id,
  [
    "type",
    "bump-scale",
    "padding-top",
    "padding-bottom"
  ],
  [
    "stack",
    "0.6",
    "4",
    "4"
  ]
);
style(
  track_main_sea_deep_leaf_id,
  [
    "type",
    "priority",
    "padding-top"
  ],
  [
    "wall",
    "1",
    "8"
  ]
);
style(
  track_main_sea_deep_all_leaf_id,
  [
    "type",
    "padding-top",
    "padding-bottom"
  ],
  [
    "stack",
    "4",
    "4"
  ]
);




/* Get variant data */
let data = get_data(request("self()", track_data_id));
let v.chromosome = data_string(data,"chromosome");
let v.start = data_number(data,"start");
let v.end = v.start + data_number(data,"length");
let v.id = data_string(data,"id");
let v.alleles = data_string(data,"alleles");
let v.variety = data_string(data,"variety"); //['SNV', 'indel', 'deletion', ...]
let v.severity = data_number(data,"severity"); //[1, 5, ...]
let v.consequence = data_string(data,"consequence"); //['upstream_gene_variant', ...]

let deep = v.variety != "SNV";
let has_anchor_bp = v.variety == "deletion" || v.variety == "indel";
let v.display_start = if(has_anchor_bp, v.start+1, v.start);

halt(only_warm());

/* ZMenu data */

let zmenu_paint = variant_zmenu(*v);

/* Setup leafs */

let leaf.letter = leaf(push_str(track_leaf_id, "main/letter/content"));
let leaf.trackname = leaf(push_str(track_leaf_id, "title/content"));
let leaf.shore_under = leaf(push_str(track_leaf_id, "main/main/shore/under/content"));
let leaf.shore_over = leaf(push_str(track_leaf_id, "main/main/shore/over/content"));

/* Draw shore (bp blocks) */

let base_height = 6; // block height
let base_gap = 1; // block gap width

// draw coloured blocks to represent SNVs
let variant_paint = paint_solid(index(variant_colours(), v.severity));
let nw = coord(v.display_start, [0,...], [base_gap/2,...]);
let se = coord(v.display_start+1, [base_height,...], [-base_gap/2,...]);
rectangle(nw, se, variant_paint, if(!deep, [leaf.shore_under,...], [leaf(""),...]));
rectangle(nw, se, zmenu_paint, if(!deep, [leaf.shore_over,...], [leaf(""),...]));
// draw block borders (for all base pairs)
let (bp_start,bp_end) = bp_range();
let position = enumerate([bp_end-bp_start+1]) + bp_start;

let nw = coord(position,[0,...], [base_gap/2,...]);
let se = coord(position+1,[base_height,...], [-base_gap/2,...]);
let border_paint = paint_hollow(colour!("#d4d9de"), 0);
rectangle(nw, se, border_paint, [leaf.shore_over,...]);

/* Label settings */
let label.snv_id = setting_boolean("label-snv-id",[]);
let label.snv_alleles = setting_boolean("label-snv-alleles",[]);
let label.other_id = setting_boolean("label-other-id",[]);
let label.other_alleles = setting_boolean("label-other-alleles",[]);
let label.eel = setting_boolean("show-extents",[]);
v.label_id = if(deep, [label.other_id,...], [label.snv_id,...]);
v.label_alleles = if(deep, [label.other_alleles,...], [label.snv_alleles,...]);

/* Create templates for the variant data in sea subtrack */
function text_width(char_count){
    char_count * 6 + 5
}


let top_left_text = v.variety;
let top_right_text = v.alleles;
let bottom_text = v.id;
let right_offset = text_width(strlen(top_left_text));
let text_offset = 8;


/* Eels (variant extents) */
let top_line_height = 15;
let bottom_line_height = 13;
let eel_line_height = 13;
let height_to_eel = if(v.label_id, [top_line_height + bottom_line_height, ...], [top_line_height, ...]); //total text height
let height = height_to_eel + if(label.eel, [eel_line_height,...], [0,...]); // text + eel height

let top_left_pen = pen("300 'IBM Plex Mono', monospace", 10, [colour!("#1b2c39"),...], [colour!("transparent"),...]); //Light
let top_right_pen = pen("600 'IBM Plex Mono', monospace", 11, [colour!("#1b2c39"),...], [colour!("transparent"),...]); //Semibold
let bottom_pen = pen("600 'IBM Plex Mono', monospace", 10, [colour!("#1b2c39"),...], [colour!("transparent"),...]);


/* Create sea leafs (the sea is the space below bp blocks) */

// construct sea leaf paths for each variant
let base_container = push_str(track_main_sea_leaf_id, if(deep, ["deep/",...], ["shallow/",...]));
shallow_container = push_str(push_str(base_container, v.variety), v.id);
sea_text_leaf = leaf(push_str(shallow_container, "/text/content")); // ['../sea/shallow/SNV/rs699/text/content', ...]
sea_text_leaf = set(sea_text_leaf, !deep, [leaf(""),...]); // move SNVs text to bin
deep_sea_text_leaf = if(deep, sea_text_leaf, [leaf(""),...]);

/* Draw sea text (variant type, alleles, id) */

text(coord(v.display_start, [0,...], [text_offset,...]), top_left_pen, top_left_text, sea_text_leaf);
text(coord(v.display_start, [0,...], right_offset+text_offset), top_right_pen, top_right_text, if(v.label_alleles, sea_text_leaf, [leaf(""),...]));
text(coord(v.display_start, [top_line_height,...], [text_offset,...]), bottom_pen, bottom_text, if(v.label_id, sea_text_leaf, [leaf(""),...]));

/* Draw sea zmenus */

let width = text_width(max(
    strlen(top_left_text)+if(v.label_alleles,strlen(top_right_text),[0,...])+1,
    if(v.label_id,strlen(bottom_text),[0,...])));

rectangle(
    coord(v.start, height_to_eel, [2,...]),
    coord(v.end, height_to_eel+10, [-2,...]),
    zmenu_paint, if(label.eel && deep, sea_text_leaf, [leaf(""),...])
);

rectangle(coord(v.start, [0,...], [5,...]), coord(v.start, height, width), zmenu_paint, sea_text_leaf);

/* Draw sea eels (extents) */

let eel_length = if(deep,v.end-v.display_start,[0,...]);
let eel_v = count(eel_length);
let position = index(v.display_start,eel_v) + enumerate(eel_length);
let eel_h = 3;

rectangle(
    coord(position, index(height_to_eel,eel_v), [base_gap/2,...]),
    coord(position+1, index(height_to_eel,eel_v)+eel_h, [-base_gap/2,...]),
    paint_solid(colour!("#6f8190")),
    if(label.eel, index(sea_text_leaf,eel_v), [leaf(""),...])
);

/* Draw fishing lines */

let dot_size = 3; //radius
let dot_smoothness = 13; //nr of corners
let height_to_dot = [(top_line_height/2)-(dot_size/2)-1,...];
let line_paint = paint_dotted([colour!("white"),...], [colour!("#999"),...], 4, 1, 0.5);
let fish_line_h = height_to_dot-(dot_size/2)-1;

rectangle_join(
    coord(v.display_start, fish_line_h, [1,...]),
    coord(v.display_start, [7,...], [1,...]),
    line_paint, deep_sea_text_leaf, [leaf.shore_under,...]
);

polygon(
    coord(v.display_start, height_to_dot, [1,...]),
    [dot_size,...], dot_smoothness, 0,
    variant_paint, deep_sea_text_leaf
);

/* Draw track furniture */

draw_track_category(["V"], [track_id], [leaf.letter]);
draw_track_name(track_name, "name", leaf.trackname);
