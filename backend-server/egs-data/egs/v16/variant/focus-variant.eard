program "ensembl-webteam/core" "focus-variant" 1;
refer "libperegrine";
refer "libeoe";
include "../common/track-common.eard";
include "../common/track-style.eard";
include "variant-common.eard";
include "focus-variant-zmenu.eard";

/* Setup styles */

track_styles();

style!("""
        tracks/track/focus-variant/ {
            priority: -900;
            report: "track;switch-id=focus;!variant-id";
        }

        tracks/track/focus-variant/main/main/sun/ {
            min-height: 35;
            type: overlay;
            priority: -1;
        }

        tracks/track/focus-variant/main/main/shore/ {
            padding-top: 2;
            type: overlay;
            priority: 0;
        }

        tracks/track/focus-variant/main/main/shore/under/ {
            depth: 0;
        }

        tracks/track/focus-variant/main/main/shore/over/ {
            depth: 1;
        }

        tracks/track/focus-variant/main/main/sea/ {
            min-height: 35;
            type: stack;
            priority: 1;
        }

        tracks/track/focus-variant/main/main/sea/shallow/ {
            type: wall;
            priority: 0;
            padding-top: 4;
            padding-bottom: 4;
        }

        tracks/track/focus-variant/main/main/sea/shallow/* {
            type: stack;
            bump-scale: 0.6;
            padding-top: 4;
            padding-bottom: 4;
        }

        tracks/track/focus-variant/main/main/sea/deep/ {
            padding-top: 8;
            type: wall;
            priority: 1;
        }

        tracks/track/focus-variant/main/main/sea/deep/* {
            type: stack;
            padding-top: 4;
            padding-bottom: 4;
        }

        tracks/track/focus-variant/main/main/sea/*/over {
            depth: 2;
        }
""");

/* Get settings */

let (focus_genome_id,focus_variant_id) = focus_variant_settings();

/* Get data data */

let data = get_data(request("self()","variant-labels"));
let v.chromosome = data_string(data,"chromosome");
let v.start = data_number(data,"start");
let v.end = v.start + data_number(data,"length");
let v.id = data_string(data,"id");
let v.ref = data_string(data,"ref");
let v.alt = data_string(data,"alt");
let v.variety = data_string(data,"variety");
let v.severity = data_number(data,"severity");
let v.consequence = data_string(data,"consequence");

let deep = v.variety != "SNV";

halt(only_warm());

/* Setup leafs */

function focus_leaf(path) {
    capture focus_genome_id;

    // XXX need someway of detecting what CHR we are on, but that needs data.
    leaf(path)
}

let leaf.bgd = focus_leaf("tracks/track/focus-variant/main/background/content");
let leaf.letter = focus_leaf("tracks/track/focus-variant/main/letter/content");
let leaf.trackname = focus_leaf("tracks/track/focus-variant/title/content");
let leaf.shore_under = focus_leaf("tracks/track/focus-variant/main/main/shore/under/content");
let leaf.shore_over = focus_leaf("tracks/track/focus-variant/main/main/shore/over/content");
let leaf.sun = focus_leaf("tracks/track/focus-variant/main/main/sun/content");

/* ZMenu data */

let zmenu_paint = variant_zmenu(*v);

/* Draw shore */

let base_height = 7;

let variant_severity_paint = paint_solid(index(variant_colours(),v.severity));
let nw = coord(v.start,[0,...],[2,...]);
let se = coord(v.start+1,[base_height,...],[-2,...]);
rectangle(nw,se,variant_severity_paint,if(!deep,[leaf.shore_under,...],[leaf(""),...]));
rectangle(nw,se,zmenu_paint,if(!deep,[leaf.shore_over,...],[leaf(""),...]));

let (bp_start,bp_end) = bp_range();
let position = enumerate([bp_end-bp_start+1]) + bp_start;
let nw = coord(position,[0,...],[2,...]);
let se = coord(position+1,[base_height,...],[-2,...]);
let paint = paint_hollow(colour!("#999"),0);
rectangle(nw,se,paint,[leaf.shore_over,...]);

/* Label settings */
let label.snv_id = setting_boolean("label-snv-id",[]);
let label.snv_alleles = setting_boolean("label-snv-alleles",[]);
let label.other_id = setting_boolean("label-other-id",[]);
let label.other_alleles = setting_boolean("label-other-alleles",[]);
let label.eel = setting_boolean("show-extents",[]);

v.label_id = if(deep,[label.other_id,...],[label.snv_id,...]);
v.label_alleles = if(deep,[label.other_alleles,...],[label.snv_alleles,...]);

/* Create templates for all the variants (whether destined for sun or sea) */

let variety_str = index(["SNV","indel","insertion","deletion"],find(["SNV","INDEL","INS","DEL"],v.variety));
let top_left = variety_str;
let tmpl = template_start("{0}/{1}");
template_set(tmpl,0,v.ref);
template_set(tmpl,1,v.alt);
let top_right = template_end(tmpl);
let bottom_line = v.id;
let right_offset = strlen(top_left)*6+5;

let height_to_eel = if(v.label_id,[20,...],[10,...]);
let height = height_to_eel + if(label.eel,[10,...],[0,...]);
let sun_delta = -(height-30);

/* Eels */

let eel_length = if(deep,v.end-v.start,[0,...]);
let eel_v = count(eel_length);
let position = index(v.start,eel_v) + enumerate(eel_length);

/* Draw sun */

let pen = pen("'IBM Plex Mono', sans-serif",10,[colour!("#999"),...],[colour!("transparent"),...]);
let bold_pen = pen("700 Lato, sans-serif",10,[colour!("#999"),...],[colour!("transparent"),...]);
let sun_leaf = if(v.id == focus_variant_id,[leaf.sun,...],[leaf(""),...]);
text(coord(v.start,sun_delta,[5,...]),pen,top_left,sun_leaf);
text(coord(v.start,sun_delta,right_offset+5),bold_pen,top_right,if(v.label_alleles,sun_leaf,[leaf(""),...]));
text(coord(v.start,sun_delta+10,[5,...]),bold_pen,bottom_line,if(v.label_id,sun_leaf,[leaf(""),...]));

/* Draw sun eel */

rectangle(
    coord(position,index(height_to_eel+sun_delta,eel_v),[2,...]),
    coord(position+1,index(height_to_eel+sun_delta,eel_v)+5,[-2,...]),
    paint_solid(colour!("#999")),if(label.eel,index(sun_leaf,eel_v),[leaf(""),...])
);

/* Draw sun zmenu */

let width = max(
    strlen(top_left)+if(v.label_alleles,strlen(top_right),[0,...])+1,
    if(v.label_id,strlen(bottom_line),[0,...]))*6+5;
rectangle(coord(v.start,sun_delta,[5,...]),coord(v.start,sun_delta+height,width),zmenu_paint,sun_leaf);

rectangle(
    coord(v.start,sun_delta+height_to_eel,[2,...]),
    coord(v.end,height_to_eel+sun_delta+10,[-2,...]),
    zmenu_paint,if(label.eel,sun_leaf,[leaf(""),...])
);

/* Create sea leafs */

let base_container = push_str("tracks/track/focus-variant/main/main/sea/",if(deep,["deep/",...],["shallow/",...]));
shallow_container = push_str(push_str(base_container,v.variety),v.id);
sea_text_leaf = leaf(push_str(shallow_container,"/text/content"));
sea_text_leaf = set(sea_text_leaf,v.id==focus_variant_id,[leaf(""),...]); // remove focus from sea
sea_over_leaf = leaf(push_str(shallow_container,"/over/content"));
sea_over_leaf = set(sea_text_leaf,v.id==focus_variant_id,[leaf(""),...]); // remove focus from sea
deep_sea_text_leaf = if(deep,sea_text_leaf,[leaf(""),...]);

/* Draw sea text */

text(coord(v.start,[0,...],[5,...]),pen,top_left,sea_text_leaf);
text(coord(v.start,[0,...],right_offset+5),bold_pen,top_right,if(v.label_alleles,sea_text_leaf,[leaf(""),...]));
text(coord(v.start,[10,...],[5,...]),pen,bottom_line,if(v.label_id,sea_text_leaf,[leaf(""),...]));

/* Draw sea zmenus */

rectangle(
    coord(v.start,height_to_eel,[2,...]),
    coord(v.end,height_to_eel+10,[-2,...]),
    zmenu_paint,if(label.eel && deep,sea_text_leaf,[leaf(""),...])
);

rectangle(coord(v.start,[0,...],[5,...]),coord(v.start,height,width),zmenu_paint,sea_text_leaf);

/* Draw sea eels */

rectangle(coord(position,index(height_to_eel,eel_v),[2,...]),coord(position+1,index(height_to_eel,eel_v)+5,[-2,...]),paint_solid(colour!("#999")),if(label.eel,index(sea_text_leaf,eel_v),[leaf(""),...]));

/* Draw fishing lines */

let paint = paint_dotted([colour!("white"),...],[colour!("#999"),...],4,1,0.5);
rectangle_join(coord(v.start,height/2,[1,...]),coord(v.start,[7,...],[1,...]),paint,deep_sea_text_leaf,[leaf.shore_under,...]);
polygon(coord(v.start,height/2,[-1,...]),[3,...],7,0,variant_severity_paint,deep_sea_text_leaf);

/* Draw track furniture */

draw_track_category(["V"],["focus-variant"],[leaf.letter]);
draw_track_name(focus_variant_id,"name",leaf.trackname);
draw_swatch(colour!("#58a8f9"),[leaf.letter]);
