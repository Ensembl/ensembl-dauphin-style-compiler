program "ensembl-webteam/core" "focus-variant" 1;
refer "libperegrine";
refer "libeoe";
include "../common/track-common.eard";
include "../common/track-style.eard";
include "variant-common.eard";

/* Setup styles */

track_styles();

style!("""
        tracks/track/focus/ {
            priority: -900;
            report: "track;switch-id=focus;has-labels=true;!id";
        }

        tracks/track/focus/ {
            priority: -900;
            report: "track;switch-id=focus;has-labels=true;!id";
        }

        tracks/track/focus/main/main/sun/ {
            min-height: 25;
            type: overlay;
            priority: -1;
        }

        tracks/track/focus/main/main/shore/ {
            padding-top: 2;
            type: overlay;
            priority: 0;
        }

        tracks/track/focus/main/main/shore/under/ {
            depth: 0;
        }

        tracks/track/focus/main/main/shore/over/ {
            depth: 1;
        }

        tracks/track/focus/main/main/sea/ {
            type: stack;
            priority: 1;
        }

        tracks/track/focus/main/main/sea/shallow/ {
            type: bumper;
            priority: 0;
            padding-top: 4;
            padding-bottom: 4;
        }

        tracks/track/focus/main/main/sea/shallow/* {
            type: stack;
            bump-scale: 0.6;
            padding-top: 4;
            padding-bottom: 4;
        }

        tracks/track/focus/main/main/sea/deep/ {
            padding-top: 8;
            type: bumper;
            priority: 1;
        }

        tracks/track/focus/main/main/sea/deep/* {
            type: stack;
            padding-top: 4;
            padding-bottom: 4;
        }

        tracks/track/focus/main/main/sea/*/over {
            depth: 2;
        }
""");

/* Get settings */

let (focus_genome_id,focus_variant_id) = focus_variant_settings();

/* Get data data */

let data = get_data(request("self()","variant-labels"));
let start = data_number(data,"start");
let id = data_string(data,"id");
let ref = data_string(data,"ref");
let alt = data_string(data,"alt");
let variety = data_string(data,"variety");
let severity = data_number(data,"severity");

halt(only_warm());

/* Setup leafs */

function focus_leaf(path) {
    capture focus_genome_id;

    // XXX need someway of detecting what CHR we are on, but that needs data.
    leaf(path)
}

let leaf.bgd = focus_leaf("tracks/track/focus/main/background/content");
let leaf.text = focus_leaf(if(setting_boolean("focus-gene-label",[]),"tracks/track/focus/main/main/focus/text/content",""));
let leaf.letter = focus_leaf("tracks/track/focus/main/letter/content");
let leaf.trackname = focus_leaf("tracks/track/focus/title/content");
let leaf.shore_under = focus_leaf("tracks/track/focus/main/main/shore/under/content");
let leaf.shore_over = focus_leaf("tracks/track/focus/main/main/shore/over/content");
let leaf.sun = focus_leaf("tracks/track/focus/main/main/sun/content");

/* Draw shore */

let base_height = 7;

let paint = paint_solid(index(variant_colours(),severity));
let nw = coord(start,[0,...],[2,...]);
let se = coord(start+1,[base_height,...],[-2,...]);
rectangle(nw,se,paint,[leaf.shore_under,...]);

let (bp_start,bp_end) = bp_range();
let position = enumerate([bp_end-bp_start+1]) + bp_start;
let nw = coord(position,[0,...],[2,...]);
let se = coord(position+1,[base_height,...],[-2,...]);
let paint = paint_hollow(colour!("#999"),0);
rectangle(nw,se,paint,[leaf.shore_over,...]);

/* Create templates for all the variants (whether destined for sun or sea) */

let variety_str = index(["SNV","indel","insertion","deletion"],find(["SNV","INDEL","INS","DEL"],variety));

let tmpl = template_start("{0}/{1}");
template_set(tmpl,0,ref);
template_set(tmpl,1,alt);
let top_left = variety_str;
let top_right = template_end(tmpl);
let bottom_line = id;
let right_offset = strlen(top_left)*6+5;

/* Draw sun */

let pen = pen("'IBM Plex Mono', sans-serif",10,[colour!("#999"),...],[colour!("transparent"),...]);
let bold_pen = pen("700 Lato, sans-serif",10,[colour!("#999"),...],[colour!("transparent"),...]);
let sun_leaf = if(id == focus_variant_id,[leaf.sun,...],[leaf(""),...]);
text(coord(start,[0,...],[5,...]),pen,top_left,sun_leaf);
text(coord(start,[0,...],right_offset+5),bold_pen,top_right,sun_leaf);
text(coord(start,[10,...],[5,...]),bold_pen,bottom_line,sun_leaf);

/* Create sea leafs */

let deep = variety != "SNV";
let base_container = push_str("tracks/track/focus/main/main/sea/",if(deep,["deep/",...],["shallow/",...]));
shallow_container = push_str(push_str(base_container,variety),id);
sea_text_leaf = leaf(push_str(shallow_container,"/text/content"));
sea_text_leaf = set(sea_text_leaf,id==focus_variant_id,[leaf(""),...]); // remove focus from sea
sea_over_leaf = leaf(push_str(shallow_container,"/over/content"));
sea_over_leaf = set(sea_text_leaf,id==focus_variant_id,[leaf(""),...]); // remove focus from sea

deep_sea_text_leaf = if(deep,sea_text_leaf,[leaf(""),...]);

/* Draw sea text */

text(coord(start,[0,...],[5,...]),pen,top_left,sea_text_leaf);
text(coord(start,[0,...],right_offset+5),bold_pen,top_right,sea_text_leaf);
text(coord(start,[10,...],[5,...]),pen,bottom_line,sea_text_leaf);

/* Draw fishing lines */

let paint = paint_dotted([colour!("white"),...],[colour!("#999"),...],4,1,0.5);
rectangle_join(coord(start,[10,...],[-1,...]),coord(start,[7,...],[-1,...]),paint,deep_sea_text_leaf,[leaf.shore_under,...]);
polygon(coord(start,[13,...],[-1,...]),[3,...],7,0,paint_solid(colour!("red")),deep_sea_text_leaf);

/* Draw track furniture */

draw_track_category(["V"],["focus"],[leaf.letter]);
draw_track_name(focus_variant_id,"name",leaf.trackname);
draw_swatch(colour!("#58a8f9"),[leaf.letter]);
