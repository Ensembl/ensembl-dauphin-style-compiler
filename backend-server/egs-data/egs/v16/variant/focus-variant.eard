program "ensembl-webteam/core" "focus-variant" 1;
refer "libperegrine";
refer "libeoe";
include "../common/track-common.eard";
include "../common/track-style.eard";
include "variant-common.eard";
include "focus-variant-zmenu.eard";

/* Setup styles */

track_styles();

style!("""
        tracks/track/focus-variant/ {
            priority: -900;
            padding-top: 60;
            report: "track;switch-id=focus;!variant-id";
        }

        tracks/track/focus-variant/main/main/sun/ {
            min-height: 46;
            padding-bottom: 11;
            padding-top: -40;
            type: overlay;
            priority: -1;
        }

        tracks/track/focus-variant/main/main/shore/ {
            padding-top: 2;
            type: overlay;
            priority: 0;
        }

        tracks/track/focus-variant/main/main/shore/under/ {
            depth: 0;
        }

        tracks/track/focus-variant/main/main/shore/over/ {
            depth: 1;
        }

        tracks/track/focus-variant/main/main/sea/ {
            min-height: 45;
            type: stack;
            priority: 1;
        }

        tracks/track/focus-variant/main/main/sea/shallow/ {
            type: wall;
            priority: 0;
            padding-top: 8;
            padding-bottom: 4;
        }

        tracks/track/focus-variant/main/main/sea/shallow/* {
            type: stack;
            bump-scale: 0.6;
            padding-top: 8;
            padding-bottom: 4;
        }

        tracks/track/focus-variant/main/main/sea/deep/ {
            padding-top: 8;
            type: wall;
            priority: 1;
        }

        tracks/track/focus-variant/main/main/sea/deep/* {
            type: stack;
            padding-top: 4;
            padding-bottom: 4;
        }

        tracks/track/focus-variant/main/main/sea/*/over {
            depth: 2;
        }
""");

/* Get settings */

let (focus_genome_id,focus_variant_id) = focus_variant_settings();

/* Get data data */

let data = get_data(request("self()","variant-labels"));
let v.chromosome = data_string(data,"chromosome");
let v.start = data_number(data,"start");
let v.end = v.start + data_number(data,"length");
let v.id = data_string(data,"id");
let v.alleles = data_string(data,"alleles");
let v.variety = data_string(data,"variety");  //['SNV', 'indel', 'deletion', ...]
let v.severity = data_number(data,"severity");  //[1, 5, ...]
let v.consequence = data_string(data,"consequence"); //['upstream_gene_variant', ...]

let deep = v.variety != "SNV";
let has_anchor_bp = v.variety == "deletion" || v.variety == "indel";
let v.display_start = if(has_anchor_bp, v.start+1, v.start);

halt(only_warm());

/* Setup leafs */

function focus_leaf(path) {
    capture focus_genome_id;

    // XXX need someway of detecting what CHR we are on, but that needs data.
    leaf(path)
}

let leaf.bgd = focus_leaf("tracks/track/focus-variant/main/background/content");
let leaf.letter = focus_leaf("tracks/track/focus-variant/main/letter/content");
let leaf.trackname = focus_leaf("tracks/track/focus-variant/title/content");
let leaf.shore_under = focus_leaf("tracks/track/focus-variant/main/main/shore/under/content");
let leaf.shore_over = focus_leaf("tracks/track/focus-variant/main/main/shore/over/content");
let leaf.sun = focus_leaf("tracks/track/focus-variant/main/main/sun/content");

/* ZMenu data */

let zmenu_paint = variant_zmenu(*v);

/* Draw shore (bp blocks) */

let base_height = 6; //block height
let base_gap = 1; //block gap width
// draw colored blocks (for SNVs)
let variant_severity_paint = paint_solid(index(variant_colours(),v.severity));
let nw = coord(v.display_start,[0,...],[base_gap/2,...]);
let se = coord(v.display_start+1,[base_height,...],[-base_gap/2,...]);
rectangle(nw,se,variant_severity_paint,if(!deep,[leaf.shore_under,...],[leaf(""),...]));
rectangle(nw,se,zmenu_paint,if(!deep,[leaf.shore_over,...],[leaf(""),...]));
// draw block borders (for all base pairs)
let (bp_start,bp_end) = bp_range();
let position = enumerate([bp_end-bp_start+1]) + bp_start;
let nw = coord(position,[0,...],[base_gap/2,...]);
let se = coord(position+1,[base_height,...],[-base_gap/2,...]);
let paint = paint_hollow(colour!("#d4d9de"),0);
rectangle(nw,se,paint,[leaf.shore_over,...]);

/* Label settings */
let label.snv_id = setting_boolean("label-snv-id",[]);
let label.snv_alleles = setting_boolean("label-snv-alleles",[]);
let label.other_id = setting_boolean("label-other-id",[]);
let label.other_alleles = setting_boolean("label-other-alleles",[]);
let label.eel = setting_boolean("show-extents",[]);

v.label_id = if(deep,[label.other_id,...],[label.snv_id,...]);
v.label_alleles = if(deep,[label.other_alleles,...],[label.snv_alleles,...]);

/* Create templates for all the variants (whether destined for sun or sea) */

function text_width(char_count){
    char_count*6+5
}

let top_left_text = v.variety;
let top_right_text = v.alleles;
let bottom_text = v.id;
let right_offset = text_width(strlen(top_left_text));
let text_offset = 8;

let is_focus_v = v.id == focus_variant_id;
let top_padding = 10;
let top_lineh = 13;
let bottom_lineh = 13; 
let height_to_eel = if(v.label_id, [top_padding+top_lineh,...], [top_padding,...]);
let height = height_to_eel + if(label.eel && !is_focus_v, [0,...], [0,...]);
let sun_delta = -(height-(top_padding+top_lineh+bottom_lineh)); // top edge of focus variant text

/* Eels (variant extents) */

let eel_length = if(deep,v.end-v.display_start,[0,...]);
let eel_v = count(eel_length);
let position = index(v.display_start,eel_v) + enumerate(eel_length);

/* Draw sun */

let tl_pen = pen("300 'IBM Plex Mono', monospace", 10, [colour!("#1b2c39"),...], [colour!("transparent"),...]); //Light
let tr_pen = pen("600 'IBM Plex Mono', monospace", 11, [colour!("#1b2c39"),...], [colour!("transparent"),...]); //Semibold
let bottom_pen = pen("600 'IBM Plex Mono', monospace", 10, [colour!("#1b2c39"),...], [colour!("transparent"),...]);
let sun_leaf = if(is_focus_v, [leaf.sun,...], [leaf(""),...]);
text(coord(v.display_start, sun_delta, [text_offset,...]), tl_pen, top_left_text, sun_leaf);
text(coord(v.display_start, sun_delta-1, right_offset+text_offset), tr_pen, top_right_text, if(v.label_alleles, sun_leaf, [leaf(""),...]));
text(coord(v.display_start, sun_delta+top_lineh, [text_offset,...]),bottom_pen,bottom_text, if(v.label_id, sun_leaf, [leaf(""),...]));
// Draw focus variant dot
let dot_size = 4;
polygon(coord(v.display_start, sun_delta+(top_lineh/2)-3, [1,...]), [dot_size,...], 13, 0, variant_severity_paint, if(deep, sun_leaf, [leaf(""),...]));

/* Draw sun zmenu */

let width = text_width(max(
    strlen(top_left_text)+if(v.label_alleles,strlen(top_right_text),[0,...])+1,
    if(v.label_id,strlen(bottom_text),[0,...])));

rectangle(coord(v.display_start,sun_delta,[5,...]),coord(v.display_start,sun_delta+height,width),zmenu_paint,sun_leaf);

rectangle(
    coord(v.display_start,sun_delta+height_to_eel,[2,...]),
    coord(v.end,height_to_eel+sun_delta+10,[-2,...]),
    zmenu_paint,if(label.eel,sun_leaf,[leaf(""),...])
);

/* Create sea leafs */

let base_container = push_str("tracks/track/focus-variant/main/main/sea/", if(deep, ["deep/",...], ["shallow/",...]));
shallow_container = push_str(push_str(base_container, v.variety), v.id);
sea_text_leaf = leaf(push_str(shallow_container, "/text/content")); // ['../sea/shallow/SNV/rs699/text/content', ...]
sea_text_leaf = set(sea_text_leaf, is_focus_v || !deep, [leaf(""),...]); // remove focus and SNVs from sea
sea_over_leaf = leaf(push_str(shallow_container, "/over/content"));
sea_over_leaf = set(sea_text_leaf, is_focus_v || !deep, [leaf(""),...]); // remove focus and SNVs from sea
deep_sea_text_leaf = if(deep, sea_text_leaf, [leaf(""),...]);

/* Draw sea text (variant type, alleles, id) */

text(coord(v.display_start, [0,...], [text_offset,...]), tl_pen, top_left_text, sea_text_leaf);
text(coord(v.display_start, [0,...], right_offset+text_offset), tr_pen, top_right_text, if(v.label_alleles, sea_text_leaf, [leaf(""),...]));
text(coord(v.display_start, [top_lineh,...], [text_offset,...]), bottom_pen, bottom_text, if(v.label_id, sea_text_leaf, [leaf(""),...]));

/* Draw sea zmenus */

rectangle(
    coord(v.display_start,height_to_eel,[2,...]),
    coord(v.end,height_to_eel+10,[-2,...]),
    zmenu_paint,if(label.eel && deep,sea_text_leaf,[leaf(""),...])
);

rectangle(coord(v.display_start,[0,...],[5,...]),coord(v.display_start,height,width),zmenu_paint,sea_text_leaf);

/* Draw sea eels (extents) */

let eel_h = 3;
height_to_eel = height_to_eel + [5,...];
rectangle(coord(position, index(height_to_eel,eel_v), [base_gap/2,...]), coord(position+1, index(height_to_eel,eel_v)+eel_h, [-base_gap/2,...]), paint_solid(colour!("#999")), if(label.eel, index(sea_text_leaf,eel_v), [leaf(""),...]));

/* Draw fishing lines */

let height_to_dot = [(top_lineh/2)-1,...];
let paint = paint_dotted([colour!("white"),...], [colour!("#999"),...], 4, 1, 0.5);
rectangle_join(coord(v.display_start, height_to_dot-dot_size, [1,...]), coord(v.display_start, [7,...], [1,...]), paint, deep_sea_text_leaf, [leaf.shore_under,...]);
polygon(coord(v.display_start, height_to_dot, [1,...]), [dot_size,...], 13, 0, variant_severity_paint, deep_sea_text_leaf);

/* Draw track furniture */

draw_track_category(["V"], ["focus-variant"], [leaf.letter]);
draw_track_name(focus_variant_id, "name", leaf.trackname);
draw_swatch(colour!("#58a8f9"), [leaf.letter]);
