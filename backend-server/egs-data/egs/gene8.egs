import "lib:std"; use "std";
import "lib:peregrine"; use "peregrine";
import "file:common.egs"; use "common";

/* 
 * actually get the data from the server
 */

data := get_data("self()","gene",get_region());
halt(only_warm(),[data]);

/*
 * undo the compression applied by the server basically by applying
 * the transforms applied there in reverse order.
 */

focus_id := string_seq(data,"focus_ids");
gene_id := string_seq(data,"gene_ids");
gene_name := string_seq(data,"gene_names");
gene_desc := string_seq(data,"gene_descs");
start := delta_seq(data,"starts");
end := start + delta_seq(data,"lengths");
gene_designation := classified_seq(data,"gene_designation_keys","gene_designation_values");
gene_biotype := classified_seq(data,"gene_biotypes_keys","gene_biotypes_values");
strand := positive_seq(data,"strands");
designated_transcript_id := string_seq(data,"designated_transcript_ids");
designated_transcript_biotype := classified_seq(data,"designated_transcript_biotypes_keys","designated_transcript_biotypes_values");
designated_transcript_designation := classified_seq(data,"designated_transcript_designations_keys","designated_transcript_designations_values");
strand_string := len([strand]) (*) "reverse strand";
strand_string#[strand>0] := "forward strand";

/* 
 * What are the current track settings?
 */

switch_names := [
    ["track","gene-other-rev"],
    ["track","gene-pc-rev"],
    ["track","gene-other-fwd"],
    ["track","gene-pc-fwd"],
    ["track","focus"]
];

enabled_tracks := get_switch(switch_names[]);

potential_tracks := [
    "tracks/track/gene-other-rev/main/main",
    "tracks/track/gene-pc-rev/main/main",
    "tracks/track/gene-other-fwd/main/main",
    "tracks/track/gene-pc-fwd/main/main",
    "tracks/track/focus/main/main"
];

potential_tracks_bgd := [
    "tracks/track/gene-other-rev/main/background/content",
    "tracks/track/gene-pc-rev/main/background/content",
    "tracks/track/gene-other-fwd/main/background/content",
    "tracks/track/gene-pc-fwd/main/background/content",
    "tracks/track/focus/main/background/content"
];

/*

/ <- stack
title/ <- track title
main/ <- overlay
main/background/ <- chevrons (WINDOW)
main/main/ <- bumper
main/main/<id>/ <- stacker
main/main/<id>/blocks/ <- blocks
main/main/<id>/text/ <- label

*/

style("tracks/track/gene-other-rev/",["priority"][],["110"][]);
style("tracks/track/gene-pc-rev/",["priority"][],["100"][]);
style("tracks/track/gene-other-fwd/",["priority"][],["-110"][]);
style("tracks/track/gene-pc-fwd/",["priority"][],["-100"][]);
style("tracks/track/focus/",["priority"][],["-900"][]);

style("**/main/main/",["type"][],["bumper"][]);
style("**/main/main/*/",["type"][],["overlay"][]);
style("**/main/main/*/blocks/",["depth"][],["4"][]);
style("**/main/background/content",["depth","padding-top"][],["-10","32"][]);

use_allotment_names(base_allotment_names,enabled_tracks,potential_tracks);
use_allotment_names(allotment_names_bgd,enabled_tracks,potential_tracks_bgd);
use_allotments(allotments_bgd,enabled_tracks,allotment_names_bgd);

use_allotments(allotments_wallpaper,enabled_tracks,[
    "tracks/track/gene-other-rev/main/background/content",
    "tracks/track/gene-pc-rev/main/background/content",
    "tracks/track/gene-other-fwd/main/background/content",
    "tracks/track/gene-pc-fwd/main/background/content",
    "tracks/track/focus/main/background/content",
]);

use_allotments(allotments_trackname,enabled_tracks,[
    "tracks/track/gene-other-rev/title/content",
    "tracks/track/gene-pc-rev/title/content",
    "tracks/track/gene-other-fwd/title/content",
    "tracks/track/gene-pc-fwd/title/content",
    "tracks/track/focus/title/content",
]);

tracks_used_cat := ["","","","",""];
tracks_used_cat[enabled_tracks] := gene_cat_allotments[enabled_tracks];

/*
 * Which allotment and track does data go into?
 *
 * There are separate allotments for protein_coding and non-protein_coding
 * and also for forward and reverse strand. As usual there is a fifth 
 * allotment for a focus-feature.
 *
 * For the data on each allotment there are currently two tracks: the
 * main data and the labels.
 */

allotment_idx := len([gene_id]) (*) 0;

allotment_idx#[strand > 0] (+=) 2;
allotment_idx#[in(gene_biotype,["protein_coding"])] (+=) 1;

focus_gene := list_switch(["focus","gene"]);
allotment_idx#[focus_id==focus_gene] := 4;

force_allotment(base_allotment_names[]);
base_allotment_names := [append_group(index(allotment_idx,base_allotment_names),gene_id)];
allotment_names := [append_group(base_allotment_names[],["blocks"][])];
allotment := use_allotment(append_group(allotment_names[],["content"][]));

text_allotment_names :=  [append_group(base_allotment_names[],["text"][])];
text_allotment := use_allotment(append_group(text_allotment_names[],["content"][]));

allotments_cat := [use_allotment(tracks_used_cat[])];

track_name := index(allotment_idx,potential_tracks);

/* 
 * focus object
 */

focus_start := start#[allotment_idx==4];
focus_end := end#[allotment_idx==4];

/*
 * Filter labels by which tracks are configured to have labels
 */

enabled_labels := get_switch([
    ["track","gene-other-rev","label"],
    ["track","gene-pc-rev","label"],
    ["track","gene-other-fwd","label"],
    ["track","gene-pc-fwd","label"],
    ["track","focus","label"],
][]);

enabled_gene_labels := index(allotment_idx,[enabled_labels]);

text_allotment#[enabled_gene_labels==false] := use_allotment("");
text_allotment#[get_switch(["scale","no-labels"])] := use_allotment("");

gene_labels := if(get_switch(["track","gene-pc-fwd","label","id"]),gene_id,gene_name);

/*
 * What colour? What font? etc
 *
 * (driven by allotment for gene)
 */

// XXX allow types to overlap with functions/vars
non_pc_colour := spot_colour(direct_colour(200,200,200,255));
pc_colour := spot_colour(direct_colour(128,128,128,255));
focus_colour := spot_colour(direct_colour(39,154,252,255));
patina := patina_filled(index(allotment_idx,[non_pc_colour,pc_colour,non_pc_colour,pc_colour,focus_colour]));

text_colour := [direct_colour(111,129,144,255),direct_colour(100,100,100,255)][(@==1)==get_switch(["settings","bluer"])];
text_size := [10,24][(@==1)==get_switch(["settings","bigger"])];

textpen := pen("'Lato', sans-serif",text_size,text_colour,[][]);

/*
 * prepare the zmenus
 */

// TODO multiline strings

/* metadata */
zmenu_patina := patina_zmenu(zmenu(""),["type"],[["gene-and-one-transcript"]][]);

/* transcript part */
zmenu_tmpl := zmenu("[<light>Transcript</light> <strong>{transcript_id}</strong>] [<light>{transcript_biotype}</light>] [<light>{strand}</light>] / [<light>{transcript_id}</light>] [<light>{designation}</light>]");
tr_zmenu_patina := patina_zmenu(zmenu_tmpl,["gene_id","transcript_id","transcript_biotype","strand","designation","type","track"],
                                      [[gene_id],[designated_transcript_id],[designated_transcript_biotype],[strand_string],[designated_transcript_designation],["transcript"],[track_name]][]);

/* gene part */
zmenu_tmpl := zmenu("[<light>Gene</light> {symbol}] / [<strong><focus>{id}</focus></strong>]");
ge_zmenu_patina := patina_zmenu(zmenu_tmpl,["symbol","id","type","track"],[[gene_name],[gene_id],["gene"],[track_name]][]);

/*
 * DRAW!
 */

/* main contents */

rectangle(spacebase(start,0,-0.5),spacebase(end,5,0.5),patina,allotment);
rectangle_on_genome(start,end,8,zmenu_patina,allotment);
rectangle_on_genome(start,end,8,tr_zmenu_patina,allotment);
rectangle_on_genome(start,end,8,ge_zmenu_patina,allotment);
text_underneath(start,8,textpen,gene_labels,text_allotment);

/* main track chevrons */
chevron_spacing := [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0][];
image_underneath(chevron_spacing,0,"chevron-left",allotments_bgd[@==0]);
image_underneath(chevron_spacing,0,"chevron-left",allotments_bgd[@==1]);
image_underneath(chevron_spacing,0,"chevron-right",allotments_bgd[@==2]);
image_underneath(chevron_spacing,0,"chevron-right",allotments_bgd[@==3]);

/* focus chevrons */
focus_strand := strand#[focus_id==focus_gene];
image_underneath(chevron_spacing,0,["chevron-left","chevron-right"][@==focus_strand],allotments_wallpaper[@==4]);

/* track names */
draw_track_names(gene_track_names,gene_name_switches,allotments_trackname);

/* track category */
//draw_track_category("G",allotments_cat);

/* focus swatch */
//draw_focus_swatch(allotments_cat[@==4]);

/* red-dotted lines */
dots_allotment := use_allotment(["","track-window:red-dots:window[56]"][(@==1)==(get_switch(["track","focus"]))]);
//red_dotted(focus_start,focus_end,dots_allotment);
