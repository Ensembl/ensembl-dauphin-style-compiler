import "lib:std"; use "std";
import "lib:peregrine"; use "peregrine";
import "file:common.egs"; use "common";


/* 
 * actually get the data from the server
 */

data := get_data("self()","transcript",get_region());
halt(only_warm(),[data]);

/*
 * undo the compression applied by the server basically by applying
 * the transforms applied there in reverse order.
 */

focus_id := string_seq(data,"focus_ids");
gene_id := string_seq(data,"gene_ids");
gene_name := string_seq(data,"gene_names");
gene_desc := string_seq(data,"gene_descs");
start := delta_seq(data,"starts");
end := start + delta_seq(data,"lengths");
transcript_start := delta_seq(data,"transcript_starts");
transcript_end := transcript_start + delta_seq(data,"transcript_lengths");
gene_designation := classified_seq(data,"gene_designation_keys","gene_designation_values");
gene_biotype := classified_seq(data,"gene_biotypes_keys","gene_biotypes_values");
strand := positive_seq(data,"strands");
designated_transcript_id := string_seq(data,"designated_transcript_ids");
designated_transcript_biotype := classified_seq(data,"designated_transcript_biotypes_keys","designated_transcript_biotypes_values");
designated_transcript_designation := classified_seq(data,"designated_transcript_designations_keys","designated_transcript_designations_values");
strand_string := len([strand]) (*) "reverse strand";
strand_string#[strand>0] := "forward strand";
/* exon stuff */
exon_strand := positive_seq(data,"exon_strands");
exon_gene_biotype := classified_seq(data,"exon_gene_biotypes_keys","exon_gene_biotypes_values");
exon_start := delta_seq(data,"exon_starts");
exon_end := exon_start + delta_seq(data,"exon_lengths");
thick_start := delta_seq(data,"thick_starts");
thick_end := thick_start + delta_seq(data,"thick_lengths");
exon_gene_indexes := derun(delta_seq(data,"exon_counts"));

exon_focus_id := index(exon_gene_indexes,[focus_id]);

/* apply solidity in thick region ... */
/* ... find thick limits for each exon */
exon_thick_limit_start := index(exon_gene_indexes,[thick_start]);
exon_thick_limit_end := index(exon_gene_indexes,[thick_end]);
trunc_left := exon_thick_limit_start>exon_start;
trunc_right := exon_thick_limit_end<exon_end;

/* ... update exons to thick limit */
exon_thick_start := exon_start;
exon_thick_end := exon_end;
exon_thick_start#[trunc_left] := exon_thick_limit_start#[trunc_left];
exon_thick_end#[trunc_right] := exon_thick_limit_end#[trunc_right];

/* ... remove entirely thin exons */
thick_exons := exon_thick_start < exon_thick_end;
thick_exon_gene_indexes := exon_gene_indexes#[thick_exons];
exon_thick_start := exon_thick_start#[thick_exons];
exon_thick_end := exon_thick_end#[thick_exons];

/* 
 * What are the current track settings?
 */

enabled_tracks := get_switch([
    ["track","gene-other-rev"],
    ["track","gene-pc-rev"],
    ["track","gene-other-fwd"],
    ["track","gene-pc-fwd"],
    ["track","focus"]
][]);

potential_tracks := [
    "track:gene-other-rev","track:gene-pc-rev",
    "track:gene-other-fwd","track:gene-pc-fwd",
    "track:focus"
];

use_allotment_names(allotment_names,enabled_tracks,potential_tracks);
use_allotment_names(blanking_allotment_names,enabled_tracks,[append_depth(potential_tracks[],-1)]);
use_allotment_names(allotment_under_names,enabled_tracks,[append_depth(potential_tracks[],-2)]);
use_allotment_names(allotment_far_under_names,enabled_tracks,[append_depth(potential_tracks[],-3)]);
use_allotment_names(allotment_over_names,enabled_tracks,[append_depth(potential_tracks[],2)]);
use_allotment_names(allotment_very_over_names,enabled_tracks,[append_depth(potential_tracks[],3)]);

force_allotment(allotment_names[]);

use_allotments(allotments_wallpaper,enabled_tracks,[append_depth(potential_tracks[],-10)]);
use_allotments(allotments_cat,enabled_tracks,gene_cat_allotments);

/*
 * Which allotment and track does data go into?
 *
 * There are separate allotments for protein_coding and non-protein_coding
 * and also for forward and reverse strand. As usual there is a fifth 
 * allotment for a focus-feature.
 *
 * For the data on each allotment there are currently two tracks: the
 * main data and the labels.
 */

allotment_idx := len([gene_id]) (*) 0;
allotment_idx#[strand > 0] (+=) 2;
allotment_idx#[in(gene_biotype,["protein_coding"])] (+=) 1;
focus_gene := list_switch(["focus","gene"]);
allotment_idx#[focus_id==focus_gene] := 4;

allotment := use_allotment(append_group(index(allotment_idx,allotment_names),gene_id));
allotment_under := use_allotment(append_group(index(allotment_idx,allotment_under_names),gene_id));
allotment_far_under := use_allotment(append_group(index(allotment_idx,allotment_far_under_names),gene_id));

alienate(allotment);

/* 
 * focus object
 */

focus_start := start#[allotment_idx==4];
focus_end := end#[allotment_idx==4];

/*
 * Exon allotments
 */

exon_allotment_idx := len([exon_start]) (*) 0;
exon_allotment_idx#[exon_strand > 0] (+=) 2;
exon_allotment_idx#[in(exon_gene_biotype,["protein_coding"])] (+=) 1;
exon_allotment_idx#[exon_focus_id==focus_gene] := 4;

exon_gene_ids := index(exon_gene_indexes,[gene_id]);
notice(format([exon_gene_ids]));

exon_allotment := use_allotment(append_group(index(exon_allotment_idx,allotment_over_names),exon_gene_ids));
exon_allotment_over := use_allotment(append_group(index(exon_allotment_idx,allotment_very_over_names),exon_gene_ids));
blanking_exon_allotment := use_allotment(append_group(index(exon_allotment_idx,blanking_allotment_names),exon_gene_ids));

thick_exon_allotment := exon_allotment_over#[thick_exons];

/*
 * Filter labels by which tracks are configured to have labels
 */

enabled_labels := get_switch([
    ["track","gene-other-rev","label"],
    ["track","gene-pc-rev","label"],
    ["track","gene-other-fwd","label"],
    ["track","gene-pc-fwd","label"],
    ["track","focus","label"],
][]);

enabled_gene_labels := index(allotment_idx,[enabled_labels]);

text_allotment := allotment;
text_allotment#[enabled_gene_labels==false] := use_allotment("");
text_allotment#[get_switch(["scale","no-labels"])] := use_allotment("");

gene_labels := if(get_switch(["track","gene-pc-fwd","label","id"]),gene_id,gene_name);

track_name := index(allotment_idx,potential_tracks);

/*
 * What colour? What font? etc
 *
 * (driven by allotment for gene)
 */

// XXX allow types to overlap with functions/vars
base_non_pc_colour := direct_colour(200,200,200,255);
base_pc_colour := direct_colour(128,128,128,255);
base_focus_colour := direct_colour(39,154,252,255);

dotted_non_pc_colour := barred(direct_colour(255,255,255,255),base_non_pc_colour,5,1,0.25);
dotted_pc_colour := barred(direct_colour(255,255,255,255),base_pc_colour,5,1,0.25);
dotted_focus_colour := barred(direct_colour(255,255,255,255),base_focus_colour,5,1,0.25);
non_pc_colour := spot_colour(base_non_pc_colour);
pc_colour := spot_colour(base_pc_colour);
focus_colour := spot_colour(base_focus_colour);

under_patina := patina_filled(index(allotment_idx,[non_pc_colour,pc_colour,non_pc_colour,pc_colour,focus_colour]));
under_dotted_patina := patina_hollow(index(allotment_idx,[dotted_non_pc_colour,dotted_pc_colour,dotted_non_pc_colour,dotted_pc_colour,dotted_focus_colour]),1);
hollow_patina := patina_hollow(index(allotment_idx,[non_pc_colour,pc_colour,non_pc_colour,pc_colour,focus_colour]),1);
exon_patina := patina_filled(index(exon_allotment_idx,[non_pc_colour,pc_colour,non_pc_colour,pc_colour,focus_colour]));
exon_hollow_patina := patina_hollow(index(exon_allotment_idx,[non_pc_colour,pc_colour,non_pc_colour,pc_colour,focus_colour]),1);
white_patina := patina_filled(spot_colour(direct_colour(255,255,255,255)));
thick_exon_patina := patina_filled(index(exon_allotment_idx#[thick_exons],[non_pc_colour,pc_colour,non_pc_colour,pc_colour,focus_colour]));
text_colour := direct_colour(111,129,144,255);
text_size := 10;

textpen := pen("'Lato', sans-serif",text_size,text_colour,[][]);

/*
 * prepare the zmenus
 */

// TODO multiline strings

/* transcript part */
zmenu_tmpl := zmenu("[<light>Transcript</light> <strong>{transcript_id}</strong>] [<light>{transcript_biotype}</light>] [<light>{strand}</light>] / [<light>{transcript_id}</light>] [<light>{designation}</light>]");
tr_zmenu_patina := patina_zmenu(zmenu_tmpl,["transcript_id","transcript_biotype","strand","designation","track","type"],
                                      [[designated_transcript_id],[designated_transcript_biotype],[strand_string],[designated_transcript_designation],[track_name],["transcript"]][]);

/* gene part */
zmenu_tmpl := zmenu("[<light>Gene</light> {symbol}] / [<strong><focus>{id}</focus></strong>]");
ge_zmenu_patina := patina_zmenu(zmenu_tmpl,["symbol","id","track","type"],[[gene_name],[gene_id],[track_name],["gene"]][]);

/*
 * draw everything!
 */

/* draw gene-extent dotted lines */
rectangle_on_genome(start,start,6,hollow_patina,allotment); // left stop
rectangle_on_genome(end,end,6,hollow_patina,allotment); // right stop
rectangle_on_genome_offset(start,end,1,under_dotted_patina,allotment_far_under,3); // central dotted line
rectangle_on_genome_offset(transcript_start,transcript_end,1,under_patina,allotment_under,3); // central line


rectangle_on_genome(exon_start,exon_end,6,white_patina,blanking_exon_allotment); // exon white box
rectangle_on_genome(exon_start,exon_end,6,exon_hollow_patina,exon_allotment); // exon hollow box
rectangle_on_genome(exon_thick_start,exon_thick_end,6,thick_exon_patina,thick_exon_allotment); // exon solid box

/* zmenu areas */
rectangle_on_genome(start,end,8,tr_zmenu_patina,allotment);
rectangle_on_genome(start,end,8,ge_zmenu_patina,allotment);

/* label */
text_underneath(start,8,textpen,gene_labels,text_allotment);

chevron_spacing := [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0][];

image_underneath(chevron_spacing,0,"chevron-left",allotments_wallpaper[@==0]);
image_underneath(chevron_spacing,0,"chevron-left",allotments_wallpaper[@==1]);
image_underneath(chevron_spacing,0,"chevron-right",allotments_wallpaper[@==2]);
image_underneath(chevron_spacing,0,"chevron-right",allotments_wallpaper[@==3]);

/* focus */
focus_strand := strand#[focus_id==focus_gene];
image_underneath(chevron_spacing,0,["chevron-left","chevron-right"][@==focus_strand],allotments_wallpaper[@==4]);

/* track names */
enabled_names := get_switch([
    ["track","gene-other-rev","name"],
    ["track","gene-pc-rev","name"],
    ["track","gene-other-fwd","name"],
    ["track","gene-pc-fwd","name"],
    ["track","focus","name"],
][]);

/* track names */
draw_track_names(gene_track_names,gene_name_switches,allotments_wallpaper);

/* track category */
draw_track_category("G",allotments_cat);

/* focus swatch */
draw_focus_swatch(allotments_cat[@==4]);

/* red-dotted lines */
dots_allotment := use_allotment(["","track-window:red-dots:window[56]"][(@==1)==(get_switch(["track","focus"]))]);
red_dotted(focus_start,focus_end,dots_allotment);
