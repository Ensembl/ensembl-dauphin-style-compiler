use "std";
use "peregrine";

module "common9";

stmt use_allotments(our_allotments,enabled_tracks,potential_tracks) {
    tracks_used := ["","","","",""];
    tracks_used[enabled_tracks] := potential_tracks[enabled_tracks];
    our_allotments := [use_allotment(tracks_used[])];
}

stmt use_allotment_names(our_allotments,enabled_tracks,potential_tracks) {
    tracks_used := ["","","","","",""];
    tracks_used[enabled_tracks] := potential_tracks[enabled_tracks];
    our_allotments := [tracks_used[]];
}

gene_name_switches := [
    ["track","gene-other-rev","name"],
    ["track","gene-pc-rev","name"],
    ["track","gene-other-fwd","name"],
    ["track","gene-pc-fwd","name"],
    ["track","focus","name"],
];

gene_track_names := [
    "Genes and transcripts — Other, Reverse strand",
    "Genes and transcripts — Protein coding, Reverse strand",
    "Genes and transcripts — Other, Forward strand",
    "Genes and transcripts — Protein coding, Forward strand",
    ""
];

stmt draw_track_names(track_names,switch_names,allotments) {
    name_text_size := 12;
    name_text_colour := direct_colour(111,129,144,255);
    good_track_names := [[track_names][@<5]][];

    switches := get_switch(switch_names[]);
    label_allotments := [[allotments][@<5]][];
    label_allotments[switches==false] := use_allotment("");
    label_track_names := track_names;
    label_track_names[switches==false] := "";

    textpen_trackname := pen("'IBM Plex Mono', sans-serif",name_text_size,name_text_colour,[][]);
    text2(spacebase(len(track_names) (*) 0,0,8),textpen_trackname,label_track_names[],label_allotments[]);
}

stmt draw_track_category(category,allotments) {
    cat_text_size := 12;
    cat_text_colour := direct_colour(0,0,0,255);

    textpen_cat := pen("'Lato', sans-serif",cat_text_size,cat_text_colour,[][]);
    text2(spacebase(len(allotments) (*) 0,0,16),textpen_cat,category,allotments[]);
}

stmt draw_focus_swatch(allotment_value) {
    swatch_patina := patina_filled(simple_colour(direct_colour(88,168,249,255)));
    rectangle(spacebase(0,-9,0),spacebase(0,20,5),swatch_patina,allotment_value);
}

stmt red_dotted(pstart,pend,pallotment) {
    dots_patina := patina_hollow(barred(direct_colour(255,255,255,255),direct_colour(255,0,0,255),2,4,0.5),1);
    rectangle(spacebase(pstart,-1,0),spacebase(pstart,0,0),dots_patina,pallotment);
    rectangle(spacebase(pend,-1,0),spacebase(pend,0,0),dots_patina,pallotment);
}

style("dots/",["system","depth","depth"][],["tracking-special","56","-10"][]);
style("tracks/",["padding-top","priority"][],["16","0"][]);
style("tracks/track/*/",["padding-top","padding-bottom","height-adjust"][],["4","4","tracking"][]);
style("tracks/track/*/title/",["system","type","indent","padding-top","padding-bottom","priority"][],["window","overlay","left","2","2","-1000"][]);
style("tracks/track/*/main/",["type","priority"][],["overlay","0"][]);
style("tracks/track/*/main/letter/",["system","indent","depth"][],["window","datum(pad-left)","60"][]);
style("tracks/track/*/title/letter/",["system","indent","depth"][],["window","datum(pad-left)","60"][]);
style("tracks/track/*/main/main/",["system","priority"][],["tracking","1000"][]);
style("tracks/track/*/main/background/",["system"][],["window"][]);

stmt gene_track_styles() {
    style("tracks/track/gene-other-rev/",["priority","report","min-height"][],["110","track;switch-id=gene-other-rev;has-labels=true;!boxes","92"][]);
    style("tracks/track/gene-pc-rev/",["priority","report","min-height"][],["100","track;switch-id=gene-pc-rev;has-labels=true;!boxes","92"][]);
    style("tracks/track/gene-other-fwd/",["priority","report","min-height"][],["-110","track;switch-id=gene-other-fwd;has-labels=true;!boxes","92"][]);
    style("tracks/track/gene-pc-fwd/",["priority","report","min-height"][],["-100","track;switch-id=gene-pc-fwd;has-labels=true;!boxes","92"][]);
    style("tracks/track/focus/",["priority","report"][],["-900","track;switch-id=focus;has-labels=true;!boxes"][]);
}

stmt report_shown(rs_bool_show_tr,rs_transcript_allotment_idx,rs_transcript_id,rs_al_focus_bgd) {
    tr_group := eoes_group();
    bool_show_tr_focus := [rs_bool_show_tr];
    bool_not_focus := (rs_transcript_allotment_idx == 4)==false;
    bool_show_tr_focus[bool_not_focus] := false;
    shown_transcripts := eoes_all(tr_group,eoes_var(eoes_var_string(tr_group,rs_transcript_id#[bool_show_tr_focus[]])));
    trans_patina := patina_metadata("transcripts-shown",shown_transcripts);
    rectangle(spacebase(0,0,0),spacebase(1,0,0),trans_patina,rs_al_focus_bgd);
}
