import "lib:std"; use "std";
import "lib:peregrine"; use "peregrine";

/* 
 * actually get the data from the server
 */

data := get_data("self()","gene",get_region());

/*
 * undo the compression applied by the server basically by applying
 * the transforms applied there in reverse order.
 */

gene_id := string_seq(data,"gene_ids");
gene_name := string_seq(data,"gene_names");
gene_desc := string_seq(data,"gene_descs");
start := delta_seq(data,"starts");
end := start + delta_seq(data,"lengths");
gene_designation := classified_seq(data,"gene_designation_keys","gene_designation_values");
gene_biotype := classified_seq(data,"gene_biotypes_keys","gene_biotypes_values");
strand := positive_seq(data,"strands");
designated_transcript_id := string_seq(data,"designated_transcript_ids");
designated_transcript_biotype := classified_seq(data,"designated_transcript_biotypes_keys","designated_transcript_biotypes_values");
designated_transcript_designation := classified_seq(data,"designated_transcript_designations_keys","designated_transcript_designations_values");
strand_string := len([strand]) (*) "negative strand";
strand_string#[strand>0] := "positive strand";

/* 
 * What are the current track settings?
 */

potential_tracks := ["gene-nonpc-rev","gene-pc-rev","gene-nonpc-fwd","gene-pc-fwd","focus"];
enabled_tracks := get_switch([
    ["track","gene-nonpc-rev"],
    ["track","gene-pc-rev"],
    ["track","gene-nonpc-fwd"],
    ["track","gene-pc-fwd"],
][]);

tracks_used := ["","","","","focus"];
tracks_used[enabled_tracks] := potential_tracks[enabled_tracks];

/*
 * Which allotment and track does data go into?
 *
 * There are separate allotments for protein_coding and non-protein_coding
 * and also for forward and reverse strand. As usual there is a fifth 
 * allotment for a focus-feature.
 *
 * For the data on each allotment there are currently two tracks: the
 * main data and the labels.
 */

allotment_idx := len([gene_id]) (*) 0;

allotment_idx#[strand > 0] (+=) 2;
allotment_idx#[in(gene_biotype,["protein_coding"])] (+=) 1;

allotments := [use_allotment(tracks_used[])];
allotment := index(allotment_idx,allotments);

/*
 * Filter labels by which tracks are configured to have labels
 */

enabled_labels := get_switch([
    ["track","gene-nonpc-rev","label"],
    ["track","gene-pc-rev","label"],
    ["track","gene-nonpc-fwd","label"],
    ["track","gene-pc-fwd","label"],
][]);

enabled_gene_labels := index(allotment_idx,[enabled_labels]);

text_allotment := allotment;
text_allotment#[enabled_gene_labels==false] := use_allotment("");

gene_labels := if(get_switch(["track","gene-pc-fwd","label","id"]),[gene_id],[gene_name])[];

/*
 * What colour? What font? etc
 *
 * (driven by allotment for gene)
 */

notice("lo");

non_pc_colour := colour(200,200,200);
pc_colour := colour(128,128,128);
patina := patina_filled(index(allotment_idx,[non_pc_colour,pc_colour,non_pc_colour,pc_colour]));

text_colour := if(get_switch(["settings","bluer"]),colour(111,129,255),colour(111,129,144));
text_size := if(get_switch(["settings","bigger"]),24,12);

notice(format(text_size));

textpen := pen("'Lato', sans-serif",text_size,text_colour);

/*
 * prepare the zmenus
 */

// TODO multiline strings

/* transcript part */
zmenu_tmpl := zmenu("[<light>Transcript</light> <strong>{transcript_id}</strong>] [<light>{transcript_biotype}</light>] [<light>{strand}</light>] / [<light>{transcript_id}</light>] [<light>{designation}</light>]");
tr_zmenu_patina := patina_zmenu(zmenu_tmpl,["transcript_id","transcript_biotype","strand","designation"],
                                      [[designated_transcript_id],[designated_transcript_biotype],[strand_string],[designated_transcript_designation]][]);

/* gene part */
zmenu_tmpl := zmenu("[<light>Gene</light> {symbol}] / [<strong><focus>{id}</focus></strong>]");
ge_zmenu_patina := patina_zmenu(zmenu_tmpl,["symbol","id"],[[gene_name],[gene_id]][]);

/*
 * draw everything!
 */

//rectangle_on_genome(start,end,5,patina,allotment);
rectangle_on_genome(start,end,5,patina,allotment);
rectangle_on_genome(start,end,8,tr_zmenu_patina,allotment);
rectangle_on_genome(start,end,8,ge_zmenu_patina,allotment);
text_underneath(start,8,textpen,gene_labels,text_allotment);
