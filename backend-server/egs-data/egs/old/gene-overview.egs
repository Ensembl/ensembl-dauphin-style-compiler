import "lib:std"; use "std";
import "lib:peregrine"; use "peregrine";
import "file:common.egs"; use "common";

/* 
 * actually get the data from the server
 */

data := get_data("self()","gene-overview",get_region());
halt(only_warm(),[data]);

/*
 * undo the compression applied by the server basically by applying
 * the transforms applied there in reverse order.
 */

start := delta_seq(data,"starts");
end := start + delta_seq(data,"lengths");
gene_biotype := classified_seq(data,"gene_biotypes_keys","gene_biotypes_values");
strand := positive_seq(data,"strands");
focus_id := string_seq(data,"focus_ids");

/* 
 * What are the current track settings?
 */

potential_tracks := ["track:gene-other-rev[4]","track:gene-pc-rev[4]","track:gene-other-fwd[4]","track:gene-pc-fwd[4]","track:focus[4]"];
potential_tracks_wallpaper := [
    "track:gene-other-rev:wallpaper[-10]","track:gene-pc-rev:wallpaper[-10]",
    "track:gene-other-fwd:wallpaper[-10]","track:gene-pc-fwd:wallpaper[-10]",
    "track:focus:wallpaper[-10]"
];

enabled_tracks := get_switch([
    ["track","gene-other-rev"],
    ["track","gene-pc-rev"],
    ["track","gene-other-fwd"],
    ["track","gene-pc-fwd"],
    ["track","focus","label"],
    ["track","focus"]
][]);

tracks_used := ["","","","",""];
tracks_used[enabled_tracks] := potential_tracks[enabled_tracks];

tracks_used_wallpaper := ["","","","",""];
tracks_used_wallpaper[enabled_tracks] := potential_tracks_wallpaper[enabled_tracks];

tracks_used_cat := ["","","","",""];
tracks_used_cat[enabled_tracks] := gene_cat_allotments[enabled_tracks];

/*
 * Which allotment and track does data go into?
 *
 * There are separate allotments for protein_coding and non-protein_coding
 * and also for forward and reverse strand. As usual there is a fifth 
 * allotment for a focus-feature.
 *
 * For the data on each allotment there are currently two tracks: the
 * main data and the labels.
 */

allotment_idx := len([start]) (*) 0;

allotment_idx#[strand > 0] (+=) 2;
allotment_idx#[in(gene_biotype,["protein_coding"])] (+=) 1;

focus_gene := list_switch(["focus","gene"]);
allotment_idx#[focus_id==focus_gene] := 4;

allotments := [use_allotment(tracks_used[])];
allotments_wallpaper := [use_allotment(tracks_used_wallpaper[])];
allotments_cat := [use_allotment(tracks_used_cat[])];

allotment := index(allotment_idx,allotments);

/* 
 * focus object
 */

focus_start := start#[allotment_idx==4];
focus_end := end#[allotment_idx==4];

/*
 * What colour? What font? etc
 *
 * (driven by allotment for gene)
 */

non_pc_colour := spot_colour(direct_colour(200,200,200,255));
pc_colour := spot_colour(direct_colour(128,128,128,255));
focus_colour := spot_colour(direct_colour(39,154,252,255));
patina := patina_filled(index(allotment_idx,[non_pc_colour,pc_colour,non_pc_colour,pc_colour,focus_colour]));

/*
 * draw everything!
 */

rectangle(spacebase(start,0,-0.5),spacebase(end,5,0.5),patina,allotment);


chevron_spacing := [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0][];

image_underneath(chevron_spacing,0,"chevron-left",allotments_wallpaper[@==0]);
image_underneath(chevron_spacing,0,"chevron-left",allotments_wallpaper[@==1]);
image_underneath(chevron_spacing,0,"chevron-right",allotments_wallpaper[@==2]);
image_underneath(chevron_spacing,0,"chevron-right",allotments_wallpaper[@==3]);

/* focus */
focus_strand := strand#[focus_id==focus_gene];
image_underneath(chevron_spacing,0,["chevron-left","chevron-right"][@==focus_strand],allotments_wallpaper[@==4]);

/* track names */
draw_track_names(gene_track_names,gene_name_switches,allotments_wallpaper);

/* track category */
draw_track_category("G",allotments_cat);

/* focus swatch */
draw_focus_swatch(allotments_cat[@==4]);

/* red-dotted lines */
dots_allotment := use_allotment(["","track-window:red-dots:window[56]"][(@==1)==(get_switch(["track","focus"]))]);
red_dotted(focus_start,focus_end,dots_allotment);
