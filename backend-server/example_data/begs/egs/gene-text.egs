import "lib:std"; use "std";
import "lib:peregrine"; use "peregrine";

/* 
 * actually get the data from the server
 */

data := get_data("self()","gene",get_panel());

/*
 * undo the compression applied by the server basically by applying
 * the transforms applied there in reverse order.
 */

gene_id := string_seq(data,"gene_ids");
gene_name := string_seq(data,"gene_names");
gene_desc := string_seq(data,"gene_descs");
start := delta_seq(data,"starts");
end := start + delta_seq(data,"lengths");
gene_designation := classified_seq(data,"gene_designation_keys","gene_designation_values");
gene_biotype := classified_seq(data,"gene_biotypes_keys","gene_biotypes_values");
strand := positive_seq(data,"strands");
designated_transcript_id := string_seq(data,"designated_transcript_ids");

/*
 * Which allotment and track does data go into?
 *
 * There are separate allotments for protein_coding and non-protein_coding
 * and also for forward and reverse strand. As usual there is a fifth 
 * allotment for a focus-feature.
 *
 * For the data on each allotment there are currently two tracks: the
 * main data and the labels.
 */

allotment_idx := len([gene_id]) (*) 0;

allotment_idx#[strand > 0] (+=) 2;
allotment_idx#[in(gene_biotype,["protein_coding"])] (+=) 1;

allotment := index(allotment_idx,["gene-nonpc-rev","gene-pc-rev","gene-nonpc-fwd","gene-pc-fwd"]);

/*
 * What colour is it?
 *
 * (driven by allotment for gene)
 */

non_pc_colour := colour(250,250,250);
pc_colour := colour(128,128,128);
patina := patina_filled(index(allotment_idx,[non_pc_colour,pc_colour,non_pc_colour,pc_colour]));

/*
 * draw the data.
 */

// the main rectangles
rectangle_on_genome(start,end,5,patina,allotment);
